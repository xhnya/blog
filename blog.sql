/*
 Navicat Premium Data Transfer

 Source Server         : aliyun
 Source Server Type    : MySQL
 Source Server Version : 50724
 Source Host           : 47.111.86.192:3305
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 50724
 File Encoding         : 65001

 Date: 16/11/2021 14:08:39
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for hibernate_sequence
-- ----------------------------
DROP TABLE IF EXISTS `hibernate_sequence`;
CREATE TABLE `hibernate_sequence`  (
  `next_val` bigint(20) NULL DEFAULT NULL
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of hibernate_sequence
-- ----------------------------
INSERT INTO `hibernate_sequence` VALUES (107);

-- ----------------------------
-- Table structure for t_blog
-- ----------------------------
DROP TABLE IF EXISTS `t_blog`;
CREATE TABLE `t_blog`  (
  `id` bigint(20) NOT NULL,
  `appreciation` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `commentabled` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NULL,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `first_picture` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `flag` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `published` bit(1) NOT NULL,
  `recommend` bit(1) NOT NULL,
  `share_statement` bit(1) NOT NULL,
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `views` int(11) NULL DEFAULT NULL,
  `type_id` bigint(20) NULL DEFAULT NULL,
  `user_id` bigint(20) NULL DEFAULT NULL,
  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `FK292449gwg5yf7ocdlmswv9w4j`(`type_id`) USING BTREE,
  INDEX `FK8ky5rrsxh01nkhctmo7d48p82`(`user_id`) USING BTREE,
  CONSTRAINT `FK292449gwg5yf7ocdlmswv9w4j` FOREIGN KEY (`type_id`) REFERENCES `t_type` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FK8ky5rrsxh01nkhctmo7d48p82` FOREIGN KEY (`user_id`) REFERENCES `t_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_blog
-- ----------------------------
INSERT INTO `t_blog` VALUES (48, '1', '1', 'markdown是什么？\r\n同HTML一样，markdown也是一种标记语言，但与HTML相比，简直不能再简单！这主要体现在两个地方：\r\n\r\n标记符的数量，HTML文档需要用到数量繁多的标记符，再辅以CSS来控制样式和排版，而markdown文档只需要四个基本的标记符号就能完成同样的事。\r\n标记符的书写。HTML文档内容需要同时标记开始和结束<html><body>这是一个网页``</body></html>``，而markdown文档则只要在开始位置标记即可# 这是一个md文档。\r\nmarkdown用来干嘛？\r\n主要是用来解决文档快速排版和快速读取的问题。当我们需要让文档看起来层次分明，但又想不依赖于像Word这样的重型编辑工具来书写、排版和读取时，markdown易写易读的优势就非常明显了。\r\n\r\n并且在我使用一段时间后，发现markdown的编写方式还有助于作者快速梳理逻辑思路和文章层次。\r\n\r\n怎样书写和读取markdown？\r\n同HTML一样，你可以使用任何一款纯文本编辑工具（如记事本）来编辑和读取包含markdown格式的文本，但只有在一些网站（如简书）或者工具（如有道云笔记）下，才能呈现出美观的渲染样式。\r\n\r\n当然，markdown也可以使用HTML的标记符来控制格式和排版，这意味着，你即可以使用标准的markdown语法，也可以在其中嵌入HTML标记符，但只有一小部分会起作用。\r\n\r\n你现在看到这篇文章就完全由markdown书写。\r\n\r\nmarkdown语法\r\n我再次强调，真的非常简单！花几分钟跟随我熟悉一下语法，相信你也可以马上写出你的第一个markdown文档。\r\n\r\n基本符号：\r\n* - + >\r\n你只需要记住这四个基本符号就能控制文档的排版和样式，因为基本上所有的markdown标记都是基于这四个符号及其组合。需要注意的是，基本符号后有一个用于分割标记符和内容的空格。\r\n\r\n标题（从大到小取决于#号的数量）\r\n 一级标题\r\n # 一级标题\r\n二级标题\r\n## 二级标题\r\n三级标题\r\n### 三级标题\r\n四级标题\r\n#### 四级标题\r\n五级标题 \r\n##### 五级标题\r\n六级标题 \r\n###### 六级标题\r\n正文\r\n换行以后直接开始书写，不用加任何符号。\r\n\r\n段落\r\n一个段落以一个自然的 回车 作为换行分隔。\r\n\r\n字体样式\r\n*倾斜 *\r\n**倾斜**\r\n**加粗 **\r\n**加粗**\r\n**倾斜并加粗 **\r\n***倾斜并加粗***\r\n文字删除线\r\n\r\n\r\n引用\r\n这是一段引用\r\n>引用内容\r\n\r\n分隔符\r\n连续输入三个以上的--- 添加分隔符，下面就会出现一条横线：\r\n\r\n------------\r\n\r\n\r\n```html\r\n<input type=\"hidden\" name=\"blog.id\" th:value=\"${blog.id}\">\r\n```\r\n\r\n列表\r\n无序列表\r\n使用 \r\n* - + 中的任何一个符号加空格就可以创建无序列表，但如我这样的强迫症患者完美主义者可以进一步使用\r\n+和-来表现层次关系。\r\n\r\n* 这是一个无序列表\r\n* 这是一个无序列表\r\n\r\n+ 这是一个父无序列表\r\n  - 这是一个子无序列表\r\n有序列表\r\n使用 数字+点+空格+内容 创建有序列表。\r\n\r\n1. 这是一个有序列表\r\n2. 这是一个有序列表\r\n3. 这是一个有序列表\r\n  1. 这是一个嵌套有序列表\r\n  2. 这是一个嵌套有序列表\r\n  3. 这是一个嵌套有序列表\r\n列表可以嵌套，使用时在嵌套列表前按 tab 或 空格 来控制缩进。如你所见，这篇文章的排版就使用了嵌套列表的样式。\r\n\r\n链接\r\n用markdown写下你的第一个md文档 的文章链接是这样构成的\r\n[用markdown写下你的第一个md文档](http://www.jianshu.com/p/de9c98bba332)\r\n也可以直接用尖括号包含网址的方式<http://www.jianshu.com>来直接构造一个可点击的链接 http://www.jianshu.com\r\n图片\r\n像构造一个链接一样，只需要在前面加！', '2020-11-22 00:00:00.000000', 'https://picsum.photos/800/450', '转载', b'1', b'1', b'1', 'markdow', '2020-11-23 00:00:00.000000', 224, 1, 1, 'markdown是什么？\r\n同HTML一样，markdown也是一种标记语言，但与HTML相比，简直不能再简单！');
INSERT INTO `t_blog` VALUES (64, '1', '1', '# 博客在云服务器的部署\r\n## 服务器信息及相关软件说明\r\n1.centOS7.8\r\n2.mysql5.7\r\n3. JDK1.8\r\n4. Nginx\r\n我的服务器和域名多是在阿里云买的，服务器的类型是t5，我下载的jdk的是jdk-8u271-linux-x64.tar.gz，这是去官网的链接[jdk1.8下载地址](https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html \"jdk1.8下载地址\")\r\n同样附上[mysql5.7下载地址](https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.32-linux-glibc2.12-x86_64.tar.gz \"mysql5.7下载地址\")下载的是mysql-5.7.32-linux-glibc2.12-x86_64.tar.gz\r\n再就是服务器你可以选择不下服务器，因为spring boot里面自带服务器，如果你不想下的话，当然你也可以下，\r\n然后我们还需要准备一个软件Nginx，他的作用是端口转发，这样我们就可以直接使用域名来访问，我的版本的[下载地址](http://nginx.org/download/nginx-1.16.1.tar.gz \"下载地址\")我下载的是nginx-1.16.1.tar.gz，\r\n然后你还需要下载一个winscp他可以直接传输文件的你的云服务器\r\n把这些东西全部放到你的云服务器的`/usr/local`路径下，你可以使用winscp工具，好了步入正题了\r\n## jdk的安装和配置\r\n1. 参考[csdn文章](https://blog.csdn.net/pdsu161530247/article/details/81582980?utm_source=app \"csdn文章\")\r\n2. 进入到local路径下 `cd /usr/local`\r\n3. 使用解压命令 `tar -zxvf jdk-8u271-linux-x64.tar.gz`\r\n4. 配置jdk环境变量，`vim /etc/profile`，按ins即可进入编辑状态，在末尾添加\r\n- `export JAVA_HOME=/usr/local/jdk1.8.0_271jdk安装目录`\r\n- `export JRE_HOME=${JAVA_HOME}/jre`\r\n- `export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib:$CLASSPATH`\r\n- `export JAVA_PATH=${JAVA_HOME}/bin:${JRE_HOME}/bin`\r\n- `export PATH=$PATH:${JAVA_PATH}`  \r\n按esc，之后按`:wq`退出即可\r\n## mysql的安装\r\n## Nginx的安装与配置\r\nNginx可以实现端口转发，本来服务器下是要用域名/ip:8080访问，用了就可以直接用域名/ip访问，参考[Nginx的安装和配置](https://blog.csdn.net/qq_42815754/article/details/82980326?utm_source=app \"Nginx的安装和配置\")\r\n## Tomcat\r\nTomcat我是没有安装，我是打包成了jar包，jar包的话就可以不用安装Tomcat，你也可以打包成war包，war包的话就要安装Tomcat\r\n## jar的执行\r\n在linux系统中运行jar包主要有以下几种方式。  \r\n\r\n一、`java -jar XXX.jar`  \r\n\r\n这是最基本的jar包执行方式，但是当我们用ctrl+c中断或者关闭窗口时，程序也会中断执行。  \r\n\r\n二、`java -jar XXX.jar &`\r\n\r\n&代表在后台运行，使用ctrl+c不会中断程序的运行，但是关闭窗口会中断程序的运行。  \r\n\r\n三、`nohup java -jar XXX.jar &`\r\n\r\n使用这种方式运行的程序日志会输出到当前目录下的nohup.out文件，使用ctrl+c中断或者关闭窗口都不会中断程序的执行。  \r\n\r\n三、`nohup java -jar XXX.jar >temp.out &`  \r\n\r\n> temp.out的意思是将日志输出重定向到temp.out文件，使用ctrl+c中断或者关闭窗口都不会中断程序的执行\r\n\r\n这样就可以通过服务器的公网ip进行访问了\r\n## 备案与域名解析\r\n- 你这时候需要备案\r\n- 在阿里云控制台首页就可以进行备案\r\n- 备案之后就是域名解析，进入域名管理添加解析即可', '2020-11-28 14:22:46.266000', 'https://picsum.photos/seed/picsum/800/450', '原创', b'1', b'1', b'1', '博客在阿里云服务器下的部署', '2020-11-28 14:50:37.497000', 184, 62, 1, '本博客记录了给网站在阿里云服务器下的部署过程，操作系统是centOS7,使用的数据库是mysql5.7');
INSERT INTO `t_blog` VALUES (68, '1', '1', '# **<u>markdown语法</u>**\r\n\r\n# 一、标题\r\n\r\n在想要设置为标题的文字前面加#来表示\r\n 一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。\r\n\r\n注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。\r\n\r\n示例：\r\n\r\n```\r\n# 这是一级标题\r\n## 这是二级标题\r\n### 这是三级标题\r\n#### 这是四级标题\r\n##### 这是五级标题\r\n###### 这是六级标题\r\n```\r\n\r\n效果如下：\r\n\r\n# 这是一级标题\r\n\r\n## 这是二级标题\r\n\r\n### 这是三级标题\r\n\r\n#### 这是四级标题\r\n\r\n##### 这是五级标题\r\n\r\n###### 这是六级标题\r\n\r\n------\r\n\r\n# 二、字体\r\n\r\n- ##### 加粗\r\n\r\n要加粗的文字左右分别用两个*号包起来\r\n\r\n- ##### 斜体\r\n\r\n要倾斜的文字左右分别用一个*号包起来\r\n\r\n- ##### 斜体加粗\r\n\r\n要倾斜和加粗的文字左右分别用三个*号包起来\r\n\r\n- ##### 删除线\r\n\r\n要加删除线的文字左右分别用两个~~号包起来\r\n\r\n示例：\r\n\r\n```\r\n**这是加粗的文字**\r\n*这是倾斜的文字*`\r\n***这是斜体加粗的文字***\r\n~~这是加删除线的文字~~\r\n```\r\n\r\n效果如下：\r\n\r\n**这是加粗的文字**\r\n *这是倾斜的文字*\r\n ***这是斜体加粗的文字\\***\r\n ~~这是加删除线的文字~~\r\n\r\n------\r\n\r\n# 三、引用\r\n\r\n在引用的文字前加>即可。引用也可以嵌套，如加两个>>三个>>>\r\n n个...\r\n 貌似可以一直加下去，但没神马卵用\r\n\r\n示例：\r\n\r\n```\r\n>这是引用的内容\r\n>>这是引用的内容\r\n>>>>>>>>>>这是引用的内容\r\n```\r\n\r\n效果如下：\r\n\r\n> 这是引用的内容\r\n>\r\n> > 这是引用的内容\r\n> >\r\n> > > > > > > > > > 这是引用的内容\r\n\r\n# 四、分割线\r\n\r\n三个或者三个以上的 - 或者 * 都可以。\r\n\r\n示例：\r\n\r\n```\r\n---\r\n----\r\n***\r\n*****\r\n```\r\n\r\n效果如下：\r\n 可以看到，显示效果是一样的。\r\n\r\n------\r\n\r\n------\r\n\r\n------\r\n\r\n------\r\n\r\n# 五、图片\r\n\r\n语法：\r\n\r\n```\r\n![图片alt](图片地址 \'\'图片title\'\')\r\n\r\n图片alt就是显示在图片下面的文字，相当于对图片内容的解释。\r\n图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加\r\n```\r\n\r\n示例：\r\n\r\n```\r\n![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/\r\nu=702257389,1274025419&fm=27&gp=0.jpg \"区块链\")\r\n```\r\n\r\n效果如下：\r\n\r\n\r\n\r\n![img](https:////upload-images.jianshu.io/upload_images/6860761-fd2f51090a890873.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/550)\r\n\r\nblockchain\r\n\r\n**上传本地图片直接点击导航栏的图片标志，选择图片即可**\r\n\r\nmarkdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。\r\n 关于图床的选择我写了一篇文章，对网上存在的各种方法做了总结，需要的朋友可以看看。[markdown图床](https://www.jianshu.com/p/ea1eb11db63f)\r\n\r\n# 六、超链接\r\n\r\n语法：\r\n\r\n```\r\n[超链接名](超链接地址 \"超链接title\")\r\ntitle可加可不加\r\n```\r\n\r\n示例：\r\n\r\n```\r\n[简书](http://jianshu.com)\r\n[百度](http://baidu.com)\r\n```\r\n\r\n效果如下：\r\n\r\n[简书](https://www.jianshu.com/u/1f5ac0cf6a8b)\r\n [百度](https://links.jianshu.com/go?to=http%3A%2F%2Fbaidu.com)\r\n\r\n注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。\r\n\r\n```\r\n<a href=\"超链接地址\" target=\"_blank\">超链接名</a>\r\n\r\n示例\r\n<a href=\"https://www.jianshu.com/u/1f5ac0cf6a8b\" target=\"_blank\">简书</a>\r\n```\r\n\r\n------\r\n\r\n# 七、列表\r\n\r\n##### 无序列表\r\n\r\n语法：\r\n 无序列表用 - + * 任何一种都可以\r\n\r\n```\r\n- 列表内容\r\n+ 列表内容\r\n* 列表内容\r\n\r\n注意：- + * 跟内容之间都要有一个空格\r\n```\r\n\r\n效果如下：\r\n\r\n- 列表内容\r\n- 列表内容\r\n- 列表内容\r\n\r\n##### 有序列表\r\n\r\n语法：\r\n 数字加点\r\n\r\n```\r\n1. 列表内容\r\n2. 列表内容\r\n3. 列表内容\r\n\r\n注意：序号跟内容之间要有空格\r\n```\r\n\r\n效果如下：\r\n\r\n1. 列表内容\r\n2. 列表内容\r\n3. 列表内容\r\n\r\n##### 列表嵌套\r\n\r\n**上一级和下一级之间敲三个空格即可**\r\n\r\n- 一级无序列表内容\r\n  - 二级无序列表内容\r\n  - 二级无序列表内容\r\n  - 二级无序列表内容\r\n- 一级无序列表内容\r\n  1. 二级有序列表内容\r\n  2. 二级有序列表内容\r\n  3. 二级有序列表内容\r\n\r\n1. 一级有序列表内容\r\n   - 二级无序列表内容\r\n   - 二级无序列表内容\r\n   - 二级无序列表内容\r\n2. 一级有序列表内容\r\n   1. 二级有序列表内容\r\n   2. 二级有序列表内容\r\n   3. 二级有序列表内容\r\n\r\n------\r\n\r\n# 八、表格\r\n\r\n语法：\r\n\r\n```\r\n表头|表头|表头\r\n---|:--:|---:\r\n内容|内容|内容\r\n内容|内容|内容\r\n\r\n第二行分割表头和内容。\r\n- 有一个就行，为了对齐，多加了几个\r\n文字默认居左\r\n-两边加：表示文字居中\r\n-右边加：表示文字居右\r\n注：原生的语法两边都要用 | 包起来。此处省略\r\n```\r\n\r\n示例：\r\n\r\n```\r\n姓名|技能|排行\r\n--|:--:|--:\r\n刘备|哭|大哥\r\n关羽|打|二哥\r\n张飞|骂|三弟\r\n```\r\n\r\n效果如下：\r\n\r\n| 姓名 | 技能 | 排行 |\r\n| ---- | :--: | ---: |\r\n| 刘备 |  哭  | 大哥 |\r\n| 关羽 |  打  | 二哥 |\r\n| 张飞 |  骂  | 三弟 |\r\n\r\n# 九、代码\r\n\r\n语法：\r\n 单行代码：代码之间分别用一个反引号包起来\r\n\r\n```\r\n    `代码内容`\r\n```\r\n\r\n代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行\r\n\r\n```\r\n(```)\r\n  代码...\r\n  代码...\r\n  代码...\r\n(```)\r\n```\r\n\r\n> 注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。\r\n\r\n示例：\r\n\r\n单行代码\r\n\r\n```\r\n`create database hero;`\r\n```\r\n\r\n代码块\r\n\r\n```\r\n(```)\r\n    function fun(){\r\n         echo \"这是一句非常牛逼的代码\";\r\n    }\r\n    fun();\r\n(```)\r\n```\r\n\r\n效果如下：\r\n\r\n单行代码\r\n\r\n```\r\ncreate database hero;\r\n```\r\n\r\n代码块\r\n\r\n```\r\nfunction fun(){\r\n  echo \"这是一句非常牛逼的代码\";\r\n}\r\nfun();\r\n```\r\n\r\n\r\n\r\n作者：高鸿祥\r\n链接：https://www.jianshu.com/p/191d1e21f7ed/\r\n来源：简书\r\n简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。\r\n\r\n', '2020-12-03 13:46:39.253000', 'https://picsum.photos/id/1000/800/450', '转载', b'1', b'1', b'0', 'markdown基本语法', '2020-12-03 13:46:39.253000', 57, 66, 1, '介绍了一些markdown的基本语法，本篇转载与简书');
INSERT INTO `t_blog` VALUES (72, '1', '1', '## 1、maven项目管理工具的作用  \r\n\r\n   + maven可以帮我们自动导入jar包  \r\n\r\n   + maven的核心思想：**约定大于配置**，有约束不要去违反  \r\n\r\n     ​      maven会规定你如何编写我们的java代码，我们需要按这规定来\r\n\r\n## 2、maven的下载安装\r\n\r\n官网：https://maven.apache.org/\r\n\r\n  ![image-20201208132843910](maven.assets/image-20201208132843910.png)\r\n\r\n下载完成后，解压即可；\r\n\r\n## 3、环境变量的配置\r\n\r\n在环境变量中配置如下配置：\r\n\r\n- M2_HOME     maven目录下的bin目录\r\n- MAVEN_HOME      maven的目录\r\n- 在系统的path中配置  %MAVEN_HOME%\\bin\r\n  - tips: 如果path变量只有一行的话可以在最前方添加C:\\Windows\\System32;或者C:\\Windows\\System64;\r\n\r\n![image-20201208133910407](maven.assets/image-20201208133910407.png)\r\n\r\n检测是否安装成功,在系统控制台输入：  `mvn -vension`\r\n\r\n![image-20201208134348357](maven.assets/image-20201208134348357.png)\r\n\r\n## 4、阿里云镜像\r\n\r\n进入maven的settings.xml文件\r\n\r\n![image-20201208212417733](maven.assets/image-20201208212417733.png)\r\n\r\n\r\n\r\n+ 使用阿里云镜像可以加速我们的下载\r\n\r\n+ mirrors里面添加代码\r\n\r\n      ```java\r\n\r\n   <mirror>\r\n      <id>nexus-aliyun</id>  \r\n      <mirrorOf>*,!jeecg,!jeecg-snapshots</mirrorOf>  \r\n      <name>Nexus aliyun</name>  \r\n      <url>http://maven.aliyun.com/nexus/content/groups/public</url>  \r\n   </mirror>\r\n      ```\r\n\r\n  \r\n\r\n![image-20201208212716358](maven.assets/image-20201208212716358.png)\r\n\r\n+ 配置本地仓库\r\n\r\n  - `<localRepository>D:\\apache-maven-3.6.3\\maven-repo</localRepository>`\r\n\r\n    ![image-20201208220213087](maven.assets/image-20201208220213087.png)\r\n** 百度网盘可以获取文件\r\n链接：https://pan.baidu.com/s/1vMyT4-TKSeaq80kSOIDFpA \r\n提取码：java \r\n复制这段内容后打开百度网盘手机App，操作更方便哦--来自百度网盘超级会员V3的分享 **', '2020-12-18 07:08:19.476000', 'https://picsum.photos/id/101/800/450', '原创', b'1', b'1', b'1', 'maven管理工具', '2020-12-30 05:33:59.000000', 48, 70, 1, '这是一篇介绍maven管理工具的文章，描述了maven的主要作用，和使用方法');
INSERT INTO `t_blog` VALUES (77, '1', '1', '# mybatis学习记录\r\n\r\n\r\n\r\n## 1、简介\r\n\r\n### 1.1、什么是mybatis\r\n\r\n   + MyBatis 是一款优秀的**持久层框架**它支持定制化 SQL、存储过程以及高级映射。\r\n\r\n   + MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。\r\n\r\n   + MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。\r\n\r\n   + MyBatis 本是[apache](https://baike.baidu.com/item/apache/6265)的一个开源项目[iBatis](https://baike.baidu.com/item/iBatis), 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。\r\n\r\n   + 2013年11月迁移到Github。\r\n\r\n     获取mybatis的方法：\r\n\r\n     + maven仓库,在pom.xml中添加依赖:\r\n\r\n         ```xml\r\n       <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->\r\n       <dependency>\r\n           <groupId>org.mybatis</groupId>\r\n           <artifactId>mybatis</artifactId>\r\n           <version>3.5.2</version>\r\n       </dependency>\r\n         ```\r\n\r\n  + github： https://github.com/mybatis/mybatis-3/releases\r\n     + 中文文档：  https://mybatis.org/mybatis-3/zh/index.html\r\n\r\n### 1.2、 持久化\r\n\r\n数据持久化\r\n\r\n- 持久化就是将程序的数据在持久状态和瞬时状态转化的过程\r\n- 内存：**断电即失**\r\n- 数据库(Jdbc)，io文件持久化。\r\n\r\n**为什么需要持久化**\r\n\r\n- 有一些对象，不能让他丢掉。\r\n- 内存太贵了\r\n\r\n### 1.3、持久层\r\n\r\n持久层一般放在dao中\r\n\r\n- 完成持久化工作的代码块\r\n- 层界限十分明显。\r\n\r\n### 1.4、 为什么需要mybatis\r\n\r\n- 帮助程序猿将数据存入到数据库中。\r\n- 方便\r\n- 传统的JDBC代码太复杂了。简化。框架。自动化。\r\n- 不用Mybatis也可以。更容易上手。 **技术没有高低之分**\r\n- 优点：\r\n  - 简单易学\r\n  - 灵活\r\n  - sql和代码的分离，提高了可维护性。\r\n  - 提供映射标签，支持对象与数据库的orm字段关系映射\r\n  - 提供对象关系映射标签，支持对象关系组建维护\r\n  - 提供xml标签，支持编写动态sql。', '2020-12-20 09:06:17.628000', 'https://picsum.photos/id/1037/800/450', '原创', b'1', b'1', b'1', 'mybatis的基本介绍', '2020-12-31 05:39:09.000000', 52, 4, 1, '本文详细的介绍了mybatis的作用，已经与mybatis相关');
INSERT INTO `t_blog` VALUES (80, '1', '1', '\r\n\r\n# jQuery\r\n\r\n> jQuery是一个JavaScript库，里面存了大量的JavaScript函数\r\n\r\n## **获取JQuery**\r\n\r\n+ cdn引入\r\n\r\n  ```html\r\n  <!DOCTYPE html>\r\n  <html lang=\"en\">\r\n  <head>\r\n      <meta charset=\"UTF-8\">\r\n      <title>Title</title>\r\n      <script src=\"https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js\"></script>\r\n  </head>\r\n  <body>\r\n  </body>\r\n  </html>\r\n  ```\r\n\r\n\r\n+ 本地引入\r\n\r\n```html\r\n<!--    <script src=\"lib/jquery-3.5.1.js\"></script>-->\r\n```\r\n\r\n\r\n\r\n## jQuery使用形式\r\n\r\n简单的使用\r\n\r\n```javascript\r\n// 公式: $(selector).action()\r\n```\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js\"></script>\r\n<!--    <script src=\"lib/jquery-3.5.1.js\"></script>-->\r\n</head>\r\n<body>\r\n\r\n<a href=\"\" id=\"test-jquery\">点我</a>\r\n\r\n\r\n\r\n\r\n<script>\r\n    // 公式: $(selector).action()  selector是选择器，就相当于css的选择器\r\n\r\n    $(\'#test-jquery\').click(function () {\r\n        alert(\'hello,jquery\')\r\n    })\r\n</script>\r\n</body>\r\n</html>\r\n```\r\n\r\n\r\n\r\n> jquery选择器\r\n\r\n```html\r\n<script>\r\n    //三种选择器\r\n    //标签\r\n    document.getElementsByTagName();\r\n    //id\r\n    document.getElementById();\r\n    //类\r\n    document.getElementsByClassName();\r\n\r\n    //jquery css的选择器，jQuery多可以用\r\n    $(\'p\').click() //标签选择器\r\n    $(\'#id\').click() //id选择器\r\n    $(\'.class1\').click() //class选择器\r\n</script>\r\n```\r\n\r\n\r\n\r\n**文档工具站** :  http://jquery.cuishifeng.cn/\r\n\r\n> 事件\r\n\r\n鼠标事件，键盘事件\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js\"></script>\r\n    <style>\r\n        #divMove{\r\n            width: 500px;\r\n            height: 500px;\r\n            border: 1px solid red;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\nmouse ：<span id=\"mouseMove\"></span>\r\n<div id=\"divMove\">\r\n    在这里移动鼠标试试\r\n</div>\r\n\r\n<script>\r\n    //网页元素加载完，响应事件\r\n    $(function () {\r\n        $(\'#divMove\').mousemove(function (e) {\r\n            $(\'#mouseMove\').text(\'x:\'+e.pageX + \'y: \' + e.pageY)\r\n        })\r\n    });\r\n</script>\r\n</body>\r\n</html>\r\n```\r\n\r\n## JQuery操作DOM\r\n\r\n> 操作dom\r\n\r\n```javascript\r\n/* html部分\r\n    <ul id=\"test-ul\">\r\n      <li name=\"python\">python</li>\r\n      <li class=\"javaScript\">JavaScript</li>\r\n    </ul>\r\n     */\r\n$(\'#test-ul li[name=python]\').text();  //获得值\r\n$(\'#test-ul li[name=python]\').text(\'设置值\');  //设置值\r\n$(\'#test-ul\').html();    //获得值\r\n$(\'#test-ul\').html();    //设置\r\n```\r\n\r\n操作css\r\n\r\n```javascript\r\n $(\'#test-ul li[name=python]\').css(\"color\",\"red\");\r\n```\r\n\r\n元素的显示和隐藏：本质`display=none`\r\n\r\n```javascript\r\n$(\'#test-ul li[name=python]\').show();\r\n$(\'#test-ul li[name=python]\').hide(); \r\n```\r\n\r\n**ajax**\r\n\r\n\r\n\r\n', '2021-01-14 10:24:13.991000', 'https://picsum.photos/seed/picsum/800/450', '原创', b'1', b'1', b'1', 'JQuery', '2021-01-14 10:24:13.991000', 45, 3, 1, 'JQuery的介绍和简单使用');
INSERT INTO `t_blog` VALUES (83, '1', '1', '# Mybatis的复杂查询简单举例\r\n## 应该具备的环境\r\n1. 导入lombok\r\n2. 新建实体类 Teacher，Student\r\n3. 建立Mapper接口\r\n4. 建立Mapper.XML文件\r\n5. 在核心配置文件中绑定注册我们的Mapper接口或者文件！【方式很多，随心选】\r\n6. 测试查询是否能够成功！\r\n\r\n## 一对多的处理\r\n\r\n实体类\r\n\r\n```java\r\n@Data\r\npublic class Teacher {\r\n    private int id;\r\n    private String name;\r\n\r\n    private List<Student> students;\r\n}\r\n```\r\n\r\n```java\r\n@Data\r\npublic class Student {\r\n    private int id;\r\n    private String name;\r\n    private int tid;\r\n\r\n}\r\n```\r\n\r\n> 查询\r\n\r\n**1. 关联 - association   【多对一】**\r\n**2. 集合 - collection   【一对多】**\r\n**3. javaType    &   ofType**\r\n   + **JavaType  用来指定实体类中属性的类型**\r\n   + **ofType  用来指定映射到List或者集合中的 pojo类型，泛型中的约束类型！**\r\n\r\n> teacherMapper.xml语句\r\n>\r\n> 按结果嵌套查询\r\n\r\n```xml\r\n<select id=\"getTeacher\" resultMap=\"TeacherStudent\">\r\n     select s.id sid,s.name sname,t.id tid ,t.name tname\r\n     from student s ,teacher t\r\n     where s.tid=t.id and t.id=#{tid}\r\n</select>\r\n<resultMap id=\"TeacherStudent\" type=\"Teacher\">\r\n    <result property=\"id\" column=\"tid\"/>\r\n    <result property=\"name\" column=\"tname\"/>\r\n    <collection property=\"students\" ofType=\"Student\">\r\n        <result property=\"id\" column=\"sid\"/>\r\n        <result property=\"name\" column=\"sname\"/>\r\n        <result property=\"tid\" column=\"tid\"/>\r\n    </collection>\r\n</resultMap>\r\n```\r\n\r\n```java\r\n//dao的TeacherMapper的语句\r\n//获取指定老师的学生的信息及其老师的信息\r\n    Teacher getTeacher(@Param(\"tid\") int id);\r\n```\r\n\r\n测试类\r\n\r\n```java\r\n@Test\r\n    public void getTeacherTest(){\r\n        SqlSession sqlSession = MybatisUtils.getSqlSession();\r\n        TeacherMapper mapper = sqlSession.getMapper(TeacherMapper.class);\r\n        Teacher teacher = mapper.getTeacher(1);\r\n        System.out.println(teacher);\r\n        sqlSession.close();\r\n    }\r\n```\r\n\r\n## 多对一的处理\r\n\r\n实体类\r\n\r\n```java\r\n@Data\r\npublic class Student {\r\n    private int id;\r\n    private String name;\r\n\r\n    private Teacher teacher;\r\n\r\n}\r\n```\r\n\r\n```java\r\n@Data\r\npublic class Teacher {\r\n    private int id;\r\n    private String name;\r\n}\r\n\r\n```\r\n\r\n> StudentMapper接口\r\n\r\n```java\r\npublic interface StudentMapper {\r\n    public List<Student> getStudent();\r\n}\r\n```\r\n\r\n> 对应的xml文件\r\n\r\n```java\r\n<select id=\"getStudent\" resultMap=\"StudentTeacher\">\r\nselect * from student\r\n    </select>\r\n\r\n    <resultMap id=\"StudentTeacher\" type=\"Student\">\r\n        <result property=\"id\" column=\"id\"/>\r\n        <result property=\"name\" column=\"name\"/>\r\n        <association property=\"teacher\" column=\"tid\" javaType=\"Teacher\" select=\"getTeacher\"/>\r\n    </resultMap>\r\n\r\n<select id=\"getTeacher\" resultType=\"Teacher\">\r\nselect * from  teacher where id=#{id}\r\n</select>\r\n\r\n```\r\n\r\n**这是按查询嵌套查询**', '2021-01-16 03:45:14.090000', 'https://picsum.photos/id/1056/800/450', '原创', b'1', b'1', b'1', 'Mybatis的复杂处理', '2021-01-16 03:45:14.090000', 41, 82, 1, '简单的Mybatis的一对多和多对一的处理');
INSERT INTO `t_blog` VALUES (84, '1', '1', '## Mybatis缓存\r\n\r\n- MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。\r\n- MyBatis系统中默认定义了两级缓存：**一级缓存**和**二级缓存**\r\n  - 默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）\r\n\r\n  - 二级缓存需要手动开启和配置，他是基于namespace级别的缓存。\r\n\r\n  - 为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存\r\n\r\n### 一级缓存\r\n\r\n一级缓存也叫本地缓存：  SqlSession\r\n\r\n- 与数据库同一次会话期间查询到的数据会放在本地缓存中。\r\n- 一级缓存默认开启\r\n- 以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；\r\n\r\n测试步骤：\r\n\r\n1. 开启日志！\r\n2. 测试在一个Sesion中查询两次相同记录\r\n3. 查看日志输出\r\n\r\n> 查询语句,记得在配置文件中注册这个XML文件\r\n\r\n```xml\r\n<select id=\"queryUserById\" resultType=\"user\">\r\n        select * from user where id=#{id}\r\n</select>\r\n```\r\n\r\n\r\n\r\n> 测试类\r\n\r\n```java\r\n@Test\r\n    public void test(){\r\n        SqlSession sqlSession = MybatisUtils.getSqlSession();\r\n\r\n        UserMapper mapper = sqlSession.getMapper(UserMapper.class);\r\n\r\n        User user = mapper.queryUserById(3);\r\n        System.out.println(user);\r\n\r\n        System.out.println(\"=====================\");\r\n        User user2= mapper.queryUserById(3);\r\n        System.out.println(user2);\r\n\r\n        System.out.println(user==user2);\r\n\r\n        sqlSession.close();\r\n\r\n    }\r\n```\r\n\r\n输出结果\r\n\r\n![image-20210116195341540.png](https://i.loli.net/2021/01/16/uhFADUKv2YfgoCc.png)\r\n\r\n缓存失效\r\n\r\n            1. 所有的增删改多会刷新缓存，因为会改变原来的数据\r\n            2. 查询不同的东西\r\n            3. 查询不同的Mapper\r\n            4. 手动清除\r\n\r\n### 二级缓存\r\n\r\n默认情况下，只启用了本地的会话缓存，它仅仅对一个会话中的数据进行缓存。 要启用全局的二级缓存，只需要在你的 SQL 映射文件中添加一行：\r\n\r\n```xml\r\n<cache/>\r\n```\r\n\r\n基本上就是这样。这个简单语句的效果如下:\r\n\r\n- 映射语句文件中的所有 select 语句的结果将会被缓存。\r\n- 映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。\r\n- 缓存会使用最近最少使用算法（LRU, Least Recently Used）算法来清除不需要的缓存。\r\n- 缓存不会定时进行刷新（也就是说，没有刷新间隔）。\r\n- 缓存会保存列表或对象（无论查询方法返回哪种）的 1024 个引用。\r\n- 缓存会被视为读/写缓存，这意味着获取到的对象并不是共享的，可以安全地被调用者修改，而不干扰其他调用者或线程所做的潜在修改。\r\n\r\n步骤\r\n\r\n+ 开启全局缓存\r\n ```xml\r\n<!--        显式的开启全局缓存-->\r\n<setting name=\"cacheEnabled\" value=\"true\"/>\r\n```\r\n\r\n\r\n\r\n+ 在要使用二级缓存的Mapper文件中开启\r\n\r\n  ```xml\r\n  <cache/> \r\n  ```\r\n\r\n  也可以自定义一些配置\r\n\r\n  ```xml\r\n  <!--    在当前xml文件当中开启二级缓存-->\r\n      <cache eviction=\"FIFO\"\r\n             flushInterval=\"60000\"\r\n             size=\"512\"\r\n             readOnly=\"true\"/>\r\n  ```\r\n\r\n+ 测试\r\n\r\n测试语句,user1和user2不在同一个sqlSession当中\r\n\r\n```java\r\n @Test\r\n    public void testTwoCache(){\r\n        SqlSession sqlSession1 = MybatisUtils.getSqlSession();\r\n        SqlSession sqlSession2 = MybatisUtils.getSqlSession();\r\n        UserMapper mapper1 = sqlSession1.getMapper(UserMapper.class);\r\n        UserMapper mapper2 = sqlSession1.getMapper(UserMapper.class);\r\n\r\n        User user1 = mapper1.queryUserById(3);\r\n        System.out.println(user1);\r\n\r\n        System.out.println(\"=====================\");\r\n        User user2= mapper2.queryUserById(3);\r\n        System.out.println(user2);\r\n\r\n        System.out.println(user1==user2);\r\n\r\n        sqlSession1.close();\r\n        sqlSession2.close();\r\n\r\n    }\r\n\r\n```\r\n\r\n![image-20210116202058773.png](https://i.loli.net/2021/01/16/A4Caj8XQBPNwq1I.png)\r\n\r\n\r\n\r\n**小结：**\r\n\r\n+ 开启了二级缓存在一个Mapper文件当中有效\r\n\r\n+ 所有的数据多会先放在一级缓存中\r\n+ 只有当会话提交或者关闭的时候才会交到二级缓存当中\r\n\r\n### 缓存原理\r\n![1569985541106.png](https://i.loli.net/2021/01/16/98uADpKbaBHwriN.png)\r\n\r\n\r\n\r\n', '2021-01-16 12:47:32.970000', 'https://picsum.photos/id/1076/800/450', '原创', b'1', b'1', b'1', 'Mybatis缓存', '2021-01-16 12:50:54.300000', 44, 82, 1, '关于Mybatis的缓存，一级缓存，二级缓存以及缓存的原理');
INSERT INTO `t_blog` VALUES (86, '1', '1', '## spring简介\r\n\r\n+ spring：春天------>给行业带了了春天\r\n\r\n+ 2002，首次推出了spring雏形\r\n+ spring理念：使现有技术更加容易使用，本身就是一个大杂烩，整合了现有的技术框架\r\n\r\n\r\n\r\n+ SSH：Struts2+spring+Hibernate\r\n+ SSM：SpringMVC+spring+Mybatis\r\n\r\n\r\n\r\n官网： https://spring.io/projects/spring-framework#overview\r\n\r\n官方下载： https://repo.spring.io/release/org/springframework/spring/\r\n\r\nGitHub： https://github.com/spring-projects/spring-framework\r\n\r\nSpring Web MVC： [spring-webmvc最新版](https://mvnrepository.com/artifact/org.springframework/spring-webmvc/5.2.7.RELEASE)\r\n\r\n### 导入依赖\r\n\r\n```xml\r\n<!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-webmvc</artifactId>\r\n    <version>5.2.12.RELEASE</version>\r\n</dependency>\r\n\r\n```\r\n\r\n### 优点\r\n\r\n+ spring是一个开源的免费的框架（容器）\r\n+ Spring是一个轻量级的，非入侵的框架\r\n+ **控制反转（IOC），面向切面（AOP）**\r\n+ 支持事务的处理，对框架整合的支持\r\n\r\n\r\n\r\n总结：Spring就是一个轻量级的控制反转（IOC）和面向切面（AOP）的框架\r\n\r\n\r\n\r\n### 组成\r\n\r\n![图片.png](https://i.loli.net/2021/01/18/DC4AamHwuOf5eZr.png)\r\n\r\n\r\n\r\n### 拓展\r\n\r\nSpring官网的介绍：现代化Java开发就是基于Spring的开发\r\n\r\n![图片.png](https://i.loli.net/2021/01/18/ZJ8PMdphuczRN4j.png)\r\n\r\n+ Spring Boot\r\n  - 一个快速开发的脚手架\r\n  - 基于Spring Boot可以快速开发单个微服务\r\n  - 约束大于配置\r\n\r\n+ Spring Cloud\r\n  - SpringCloud是基于Spring Boot实现的\r\n\r\n\r\n\r\n弊端：发展了太久，违背了原本的理念，配置十分繁琐，人称“配置地狱\"', '2021-01-18 05:31:36.786000', 'https://picsum.photos/id/1037/800/450', '原创', b'1', b'1', b'1', 'Spring框架简介', '2021-01-18 05:31:36.786000', 40, 85, 1, '对于Spring框架的简单介绍');
INSERT INTO `t_blog` VALUES (87, '1', '1', '## IOC理论推导\r\n\r\n传统的调用\r\n\r\n1.UserDao\r\n\r\n```java\r\npublic interface UserDao {\r\n\r\n    void getUser();\r\n\r\n}\r\n```\r\n\r\n2.UserDaoImpl\r\n\r\n```java\r\npublic class UserDaoImpl implements UserDao{\r\n    public void getUser() {\r\n        System.out.println(\"默认获取用户数据\");\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n3.UserService\r\n\r\n```java\r\npublic interface UserService {\r\n\r\n    void getUser();\r\n}\r\n\r\n```\r\n\r\n4.UserServiceImpl\r\n\r\n```java\r\npublic class UserServiceImpl implements UserService{\r\n    UserDao userDao = new UserDaoImpl();\r\n    public void getUser() {\r\n        userDao.getUser();\r\n    }\r\n}\r\n```\r\n\r\n5.测试\r\n\r\n```java\r\npublic class MyTest {\r\n\r\n    @Test\r\n    public void SpringTest(){\r\n        UserService userService = new UserServiceImpl();\r\n        userService.getUser();\r\n    }\r\n\r\n}\r\n```\r\n\r\n在我们之前的业务中，用户的需求可能会影响我们原来的代码，我们需要根据用户的需求去修改原代码！如果程序代码量十分大，修改一次的成本代价十分昂贵！\r\n\r\n 改良：我们使用一个Set接口实现。已经发生了革命性的变化！\r\n\r\n```java\r\n    private UserDao userDao;\r\n\r\n    public void getUser() {\r\n        userDao.getUser();\r\n    }\r\n    public void setUserDao(UserDao userDao){\r\n        this.userDao = userDao;\r\n    }\r\n```\r\n\r\n\r\n\r\nset() 方法实际上是动态改变了 UserDao userDao 的 初始化部分（**new UserDaoImpl()**）\r\n\r\n测试中加上\r\n\r\n```java\r\n@Test\r\npublic void SpringTest(){\r\n    UserService userService = new UserServiceImpl();\r\n    ((UserServiceImpl)userService).setUserDao(new UserDaoMysqlImpl());\r\n    userService.getUser();\r\n\r\n}\r\n```\r\n\r\n- 之前，程序是主动创建对象！**控制权在程序猿手上**！\r\n- 使用了set注入后，程序不再具有主动性，而是变成了被动的接受对象！（**主动权在客户手上**）\r\n\r\n本质上解决了问题，程序员不用再去管理对象的创建\r\n\r\n系统的耦合性大大降低，可以更专注在业务的实现上\r\n\r\n这是IOC（控制反转）的原型，反转(理解)：主动权交给了用户\r\n\r\n### IOC的本质\r\n\r\n**控制反转**（Inversion of Control，缩写为**IoC**），是[面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做**依赖注入**（Dependency Injection，简称**DI**），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中，个人认为：控制反转就是获得依赖对象的方式反转了 \r\n\r\n**IOC是Spring框架的核心内容，使用了多种方式完美的实现了IOC，可以使用XMl配置，也可以使用注解，甚至可以零配置实现IOC**\r\n\r\n**Spring容器在初始化的时候会先读取配置文件，根据配置文件或者元数据创建与组织对象存入容器，程序使用的时候再从IOC容器中取出需要的对象**\r\n\r\n\r\n\r\n控制反转是一种通过描述（XMl或注解）并通过第三方去生产或者获取特定对象的方式，在Spring中实现控制反转的是IOC容器，其实现的方式是依赖注入\r\n\r\n## HelloSpring\r\n\r\n简单实验\r\n\r\n创建一个pojo类\r\n\r\n```java\r\n@Data\r\npublic class Hello {\r\n\r\n    private String str;\r\n}\r\n\r\n```\r\n\r\n创建一个xml文件\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n        https://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n    <bean id=\"hello\" class=\"com.xhn.pojo.Hello\">\r\n        <property name=\"str\" value=\"Spring\"/>\r\n    </bean>\r\n</beans>\r\n```\r\n\r\n然后用测试类进行测试\r\n\r\n```java\r\npublic class MyTest {\r\n\r\n    public static void main(String[] args) {\r\n        //获取Spring的上下文对象\r\n        ApplicationContext context = new ClassPathXmlApplicationContext(\"beans.xml\");\r\n\r\n        Hello hello = (Hello) context.getBean(\"hello\");\r\n\r\n        System.out.println(hello.toString());\r\n    }\r\n}\r\n\r\n```\r\n\r\n先创建一个spring容器对象，加载配置文件\r\n\r\n然后调用对象就可以了\r\n\r\n\r\n\r\n下面对第一次的进行改进\r\n\r\n直接添加xml配置文件\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <bean id=\"mysqlImpl\" class=\"com.xhn.dao.UserDaoMysqlImpl\"/>\r\n    <bean id=\"UserServiceImpl\" class=\"com.xhn.service.UserServiceImpl\">\r\n        <property name=\"userDao\" ref=\"mysqlImpl\"/>\r\n    </bean>\r\n</beans>\r\n```\r\n\r\n然后进行测试\r\n\r\n```xml\r\npublic static void main(String[] args) {\r\n\r\n        ApplicationContext context = new ClassPathXmlApplicationContext(\"beans.xml\");\r\n\r\n        UserServiceImpl userServiceImpl = (UserServiceImpl) context.getBean(\"UserServiceImpl\");\r\n\r\n        userServiceImpl.getUser();\r\n\r\n    }\r\n```\r\n\r\n这样就可以直接生成对象\r\n\r\n我们要实现不同的操作直接去修改xml的配置文件，所谓IOC，**对象由Spring来创建，管理，装配**\r\n\r\n\r\n\r\n## IOC创建对象的方式\r\n\r\n1. 使用无参对象创建对象\r\n\r\n2. 如果我们要通过有参构造创建对象\r\n\r\n   + 下标赋值\r\n\r\n     ```xml\r\n     <bean id=\"user\" class=\"com.xhn.pojo.User\">\r\n             <constructor-arg index=\"0\" value=\"xhn\"/>\r\n     </bean>\r\n     ```\r\n\r\n   + 通过类型创建,不建议使用\r\n\r\n     ```xml\r\n     <bean id=\"user\" class=\"com.xhn.pojo.User\">\r\n             <constructor-arg type=\"java.lang.String\" value=\"xhn\"/>\r\n     </bean>\r\n     ```\r\n\r\n   + 第三种直接通过参数名\r\n\r\n     ```xml\r\n     <bean id=\"user\" class=\"com.xhn.pojo.User\">\r\n             <constructor-arg name=\"name\" value=\"xhn\"/>\r\n     </bean>\r\n     ```\r\n\r\n     **在配置文件加载的时候，容器对象已经初始化了**', '2021-01-18 05:37:10.308000', 'https://picsum.photos/id/1026/800/450', '原创', b'1', b'1', b'1', 'Spring重要思想之IOC', '2021-01-18 05:38:34.037000', 47, 85, 1, '对于Spring的重要思想IOC的一些说明');
INSERT INTO `t_blog` VALUES (88, '1', '1', '## Spring配置\r\n\r\n### 别名\r\n\r\n````xml\r\n<alias name=\"user\" alias=\"userNew\"/>\r\n````\r\n\r\n创建了别名就可以用获取这个对象，区分大小写\r\n\r\n\r\n\r\n### Bean配置\r\n\r\n+ id：bean的唯一标识符\r\n+ class：bean对象的所对应的全限定名: 包名+类型\r\n+ name：也是别名，而且name可以取多个别名\r\n\r\n### import\r\n\r\nimport一般用于团队开发，可以将多个配置文件	导入合并为一个', '2021-01-19 04:36:55.153000', 'https://picsum.photos/id/1021/800/450', '原创', b'1', b'1', b'1', 'Spring配置', '2021-01-19 04:36:55.153000', 40, 85, 1, 'Spring配置');
INSERT INTO `t_blog` VALUES (89, '1', '1', '## 依赖注入\r\n\r\n### 构造器注入\r\n\r\n使用构造方法\r\n\r\n1. 复杂类型\r\n\r\n   ```java\r\n   @Data\r\n   public class Address {\r\n   \r\n       private Address address;\r\n   }\r\n   \r\n   ```\r\n\r\n   \r\n\r\n2. 真实类型\r\n\r\n   ```java\r\n   @Data\r\n   public class Student {\r\n   \r\n       private String name;\r\n       private Address address;\r\n       private String[] books;\r\n       private List<String> hobbies;\r\n       private Map<String,String> card;\r\n       private Set<String> games;\r\n       private String wife;\r\n       private Properties info;\r\n   }\r\n   ```\r\n\r\n   \r\n\r\n3. bean.xml\r\n\r\n   ```xml\r\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n   <beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n          xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n   \r\n       <bean id=\"student\" class=\"com.xhn.pojo.Student\">\r\n   <!--        第一种，简单注入-->\r\n           <property name=\"name\" value=\"xhn\"/>\r\n       </bean>\r\n   </beans\r\n   ```\r\n\r\n   \r\n\r\n4. 测试类型\r\n\r\n   ```java\r\n   public class MyTest {\r\n       public static void main(String[] args) {\r\n           ApplicationContext context = new ClassPathXmlApplicationContext(\"beans.xml\");\r\n           Student student = (Student) context.getBean(\"student\");\r\n           System.out.println(student.getName());\r\n   \r\n   \r\n       }\r\n   }\r\n   ```\r\n\r\n\r\n\r\n\r\n\r\n### Set注入\r\n\r\n+ 依赖注入：set注入\r\n  - 依赖：bean对象的创建依赖于容器\r\n  - 注入：bean对象的所有属性多是由容器来注入\r\n\r\n完善注入\r\n\r\n```xml\r\n<bean id=\"student\" class=\"com.xhn.pojo.Student\">\r\n<!--        第一种，简单注入-->\r\n        <property name=\"name\" value=\"xhn\"/>\r\n<!--        第二种bean注入-->\r\n        <property name=\"address\" ref=\"address\"/>\r\n<!--        3.数组注入-->\r\n        <property name=\"books\">\r\n            <array>\r\n                <value>火之晨曦</value>\r\n                <value>悼亡者之瞳</value>\r\n                <value>黑月之潮</value>\r\n                <value>奥丁之渊</value>\r\n            </array>\r\n        </property>\r\n<!--        list注入-->\r\n        <property name=\"hobbies\">\r\n            <list>\r\n                <value>我是傻子</value>\r\n                <value>你是傻子</value>\r\n                <value>我们多是傻子</value>\r\n                <value>你们多是傻子</value>\r\n            </list>\r\n        </property>\r\n<!--        map-->\r\n        <property name=\"card\">\r\n            <map>\r\n                <entry key=\"IDCard\" value=\"5437\"/>\r\n                <entry key=\"MoneyCard\" value=\"1000000000000000\"/>\r\n            </map>\r\n        </property>\r\n<!--        set-->\r\n\r\n        <property name=\"games\">\r\n            <set>\r\n                <value>LOL</value>\r\n                <value>2077</value>\r\n                <value>荒野大镖客2：救赎</value>\r\n            </set>\r\n        </property>\r\n\r\n<!--        null-->\r\n\r\n        <property name=\"wife\">\r\n            <null/>\r\n        </property>\r\n<!--        Properties-->\r\n\r\n        <property name=\"info\">\r\n            <props>\r\n                <prop key=\"学号\">2018004214</prop>\r\n                <prop key=\"sex\">男</prop>\r\n                <prop key=\"username\">admin</prop>\r\n            </props>\r\n        </property>\r\n\r\n    </bean>\r\n    <bean id=\"address\" class=\"com.xhn.pojo.Address\">\r\n       <property name=\"address\" value=\"赣州\"/>\r\n    </bean>\r\n```\r\n\r\n\r\n\r\n\r\n\r\n### 拓展方式注入\r\n\r\np命名空间注入：在头文件先加入\r\n\r\n```xml\r\n xmlns:p=\"http://www.springframework.org/schema/p\"\r\n```\r\n\r\n```xml\r\n<!--    p命名空间注入可以注入属性的值-->\r\n    <bean id=\"user\" class=\"com.xhn.pojo.User\" p:name=\"xhn\" p:age=\"18\"/>\r\n```\r\n\r\n测试\r\n\r\n```jav\r\n @Test\r\n    public void pTest(){\r\n        ApplicationContext context = new ClassPathXmlApplicationContext(\"userbean.xml\");\r\n        User user = context.getBean(\"user\", User.class);\r\n        System.out.println(user);\r\n    }\r\n```\r\n\r\nc命名空间注入:引入文件\r\n\r\n```xml\r\nxmlns:c=\"http://www.springframework.org/schema/c\"\r\n```\r\n\r\n```xml\r\n<!--    c命名空间是通过构造器注入-->\r\n    <bean id=\"user1\" class=\"com.xhn.pojo.User\" c:name=\"xhn1\" c:age=\"18\"/>\r\n```\r\n\r\n测试\r\n\r\n```java\r\n@Test\r\n    public void cTest(){\r\n        ApplicationContext context = new ClassPathXmlApplicationContext(\"userbean.xml\");\r\n        User user = context.getBean(\"user1\", User.class);\r\n        System.out.println(user);\r\n    }\r\n```\r\n\r\n\r\n\r\n注意：p和c命名空间不可以直接使用，需要先导入约束文件\r\n\r\n### bean的作用域\r\n\r\n1. 单例模式（Spring默认）\r\n\r\n   ```xml\r\n   <bean id=\"user1\" class=\"com.xhn.pojo.User\" c:name=\"xhn1\" c:age=\"18\" scope=\"singleton\"/>\r\n   ```\r\n\r\n   \r\n\r\n2. 原型模式,没次从容器get的时候多会产生 一个新的对象\r\n\r\n```xml\r\n<bean id=\"user1\" class=\"com.xhn.pojo.User\" c:name=\"xhn1\" c:age=\"18\" scope=\"prototype\"/>\r\n```\r\n\r\n3. 其余的request，session，application这些是可以在web中实现', '2021-01-19 04:39:53.344000', 'https://picsum.photos/id/1024/800/450', '原创', b'1', b'1', b'1', 'Spring之依赖注入', '2021-01-19 04:39:53.344000', 55, 85, 1, '关于Spring的依赖注入，这是Spring的两大重要思想中的IOC的具体实现');
INSERT INTO `t_blog` VALUES (90, '1', '1', '## Bean的自动装配\r\n\r\n### 测试\r\n\r\n```java\r\n@Test\r\n    public  void test1(){\r\n        ApplicationContext context = new ClassPathXmlApplicationContext(\"beans.xml\");\r\n        People people = context.getBean(\"people\", People.class);\r\n        people.getCat().shout();\r\n        people.getDog().shout();\r\n\r\n    }\r\n```\r\n\r\n### ByName自动装配\r\n\r\n```xml\r\n<bean id=\"cat\" class=\"com.xhn.pojo.Cat\"/>\r\n<bean id=\"dog\" class=\"com.xhn.pojo.Dog\"/>\r\n\r\n<bean id=\"people\" class=\"com.xhn.pojo.People\" autowire=\"byName\">\r\n        <property name=\"name\" value=\"xhnya\"/>\r\n </bean>\r\n```\r\n\r\n### ByType自动装配\r\n\r\n```xml\r\n<bean id=\"cat\" class=\"com.xhn.pojo.Cat\"/>\r\n<bean id=\"dog\" class=\"com.xhn.pojo.Dog\"/>\r\n\r\n<bean id=\"people\" class=\"com.xhn.pojo.People\" autowire=\"bytype\">\r\n        <property name=\"name\" value=\"xhnya\"/>\r\n </bean>\r\n```\r\n\r\n### ByName和ByType小结\r\n\r\n+ byname会自动在容器上下文查找，和自己对象set方法后面的值对应的beanID\r\n+ byType会自动在容器上下文查找，和自己对象属性类型相同的bean\r\n+ byname的时候要保证所有的bean的ID唯一，并且这个bean需要和自动注入的属性的set方法值一致\r\n+ bytype的时候要保证所有的bean的class唯一，并且这个bean需要和自动注入的属性类型一致\r\n\r\n### 使用注解实现自动装配\r\n\r\n要使用注解需知\r\n\r\n1. 导入约束，content\r\n\r\n2. 配置注解的支持  **<context:annotation-config/>**\r\n\r\n```xml\r\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n   <beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n          xmlns:context=\"http://www.springframework.org/schema/context\"\r\n          xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n          http://www.springframework.org/schema/beans/spring-beans.xsd\r\n          http://www.springframework.org/schema/context\r\n          http://www.springframework.org/schema/context/spring-context.xsd\">\r\n   \r\n       <context:annotation-config/>\r\n       <bean id=\"cat\" class=\"com.xhn.pojo.Cat\"/>\r\n       <bean id=\"dog\" class=\"com.xhn.pojo.Dog\"/>\r\n       <bean id=\"people\" class=\"com.xhn.pojo.People\"/>\r\n   </beans>\r\n```\r\n\r\n   #### @Autowired\r\n\r\n   **默认是byType方式，如果匹配不上，就会byName**\r\n\r\n   在属性上个使用，也可以在set上使用\r\n\r\n   我们可以不用编写set方法了，前提是自动装配的属性在Spring容器里，且要符合ByName 自动装配\r\n\r\n   ```java\r\n   public class People {\r\n       @Autowired\r\n       private Cat cat;\r\n       @Autowired\r\n       private Dog dog;\r\n       private String name;\r\n   }\r\n   \r\n   ```\r\n\r\n   > @Nullable 字段标记了这个注解，说明该字段可以为空\r\n   >\r\n   > public name(@Nullable String name){\r\n   >\r\n   > }\r\n\r\n   ```java\r\n   //源码\r\n   public @interface Autowired { \r\n   	boolean required() default true; \r\n   }\r\n   1234\r\n   ```\r\n\r\n   如果定义了Autowire的require属性为false，说明这个对象可以为null，否则不允许为空（false表示找不到装配，不抛出异常）\r\n\r\n   #### @Autowired+@Qualifier\r\n\r\n   **@Autowired不能唯一装配时，需要@Autowired+@Qualifier**\r\n\r\n   如果@Autowired自动装配环境比较复杂。自动装配无法通过一个注解完成的时候，可以使用@Qualifier(value = “dog”)去配合使用，指定一个唯一的id对象\r\n\r\n   ```java\r\n   public class People {\r\n       @Autowired\r\n       private Cat cat;\r\n       @Autowired\r\n       @Qualifier(value = \"dog\")\r\n       private Dog dog;\r\n       private String name;\r\n   }\r\n   \r\n   ```\r\n\r\n   弹幕评论：\r\n\r\n   如果xml文件中同一个对象被多个bean使用，Autowired无法按类型找到，可以用@Qualifier指定id查找\r\n\r\n   #### @Resource\r\n\r\n   **默认是byName方式，如果匹配不上，就会byType**\r\n\r\n   ```java\r\n   public class People {\r\n       Resource(name=\"cat\")\r\n       private Cat cat;\r\n       Resource(name=\"dog\")\r\n       private Dog dog;\r\n       private String name;\r\n   }\r\n   ```\r\n\r\n   弹幕评论：\r\n\r\n   Autowired是byType，@Autowired+@Qualifier = byType || byName\r\n\r\n   Autowired是先byteType,如果唯一則注入，否则byName查找。resource是先byname,不符合再继续byType\r\n\r\n   #### 区别：\r\n\r\n   @Resource和@Autowired的区别：\r\n\r\n   - 都是用来自动装配的，都可以放在属性字段上\r\n   - @Autowired通过byType的方式实现，而且必须要求这个对象存在！【常用】\r\n   - @Resource默认通过byname的方式实现，如果找不到名字，则通过byType实现！如果两个都找不到的情况下，就报错！【常用】\r\n   - 执行顺序不同：@Autowired通过byType的方式实现。@Resource默认通过byname的方式实现', '2021-01-19 04:43:48.899000', 'https://picsum.photos/id/1031/800/450', '原创', b'1', b'1', b'1', 'Bean的自动装配', '2021-01-19 04:43:48.899000', 121, 85, 1, 'Spring当中的关于bean的自动装配的方法和具体使用');
INSERT INTO `t_blog` VALUES (91, '1', '1', '## 整合SSM框架\r\n\r\n### 基本介绍\r\n\r\n这个是整合SSM框架的，然后利用一个小项目来整合运用了SSM框架，和一个前端的框架\r\n\r\n包结构\r\n\r\n![image-20210121230250648.png](https://i.loli.net/2021/01/21/UltyXjqS3AE4vB1.png)\r\n\r\n### **创建一个数据库**\r\n\r\n```mysql\r\nCREATE DATABASE `ssmbuild`;\r\n\r\nUSE `ssmbuild`;\r\n\r\nDROP TABLE IF EXISTS `books`;\r\n\r\nCREATE TABLE `books` ( \r\n`bookID` INT(10) NOT NULL AUTO_INCREMENT COMMENT \'书id\', \r\n`bookName` VARCHAR(100) NOT NULL COMMENT \'书名\', \r\n`bookCounts` INT(11) NOT NULL COMMENT \'数量\', \r\n`detail` VARCHAR(200) NOT NULL COMMENT \'描述\', \r\nKEY `bookID` (`bookID`) \r\n) ENGINE=INNODB DEFAULT CHARSET=utf8; \r\n\r\nINSERT  INTO `books`(`bookID`,`bookName`,`bookCounts`,`detail`)VALUES \r\n(1,\'Java\',1,\'从入门到放弃\'), \r\n(2,\'MySQL\',10,\'从删库到跑路\'), \r\n(3,\'Linux\',5,\'从进门到进牢\');\r\n```\r\n\r\n![image-20210121152704573.png](https://i.loli.net/2021/01/21/Yrh9fwmbUCXO2EJ.png)\r\n\r\n### 创建项目\r\n\r\n创建一个普通的maven项目然后导入依赖\r\n\r\n ```xml\r\n<!--    依赖-->\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>junit</groupId>\r\n            <artifactId>junit</artifactId>\r\n            <version>4.12</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <version>5.1.47</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.servlet</groupId>\r\n            <artifactId>servlet-api</artifactId>\r\n            <version>2.5</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.servlet.jsp</groupId>\r\n            <artifactId>jsp-api</artifactId>\r\n            <version>2.1</version>\r\n        </dependency>\r\n<!--        c3p0数据库连接池-->\r\n        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->\r\n        <dependency>\r\n            <groupId>com.mchange</groupId>\r\n            <artifactId>c3p0</artifactId>\r\n            <version>0.9.5.5</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.servlet</groupId>\r\n            <artifactId>jstl</artifactId>\r\n            <version>1.2</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.mybatis</groupId>\r\n            <artifactId>mybatis</artifactId>\r\n            <version>3.5.6</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.mybatis</groupId>\r\n            <artifactId>mybatis-spring</artifactId>\r\n            <version>2.0.6</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-webmvc</artifactId>\r\n            <version>5.2.12.RELEASE</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-jdbc</artifactId>\r\n            <version>5.3.2</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.aspectj</groupId>\r\n            <artifactId>aspectjweaver</artifactId>\r\n            <version>1.6.11</version>\r\n        </dependency>\r\n    </dependencies>\r\n ```\r\n\r\n静态资源问题\r\n\r\n```xml\r\n<!--    静态资源-->\r\n    <build>\r\n        <resources>\r\n            <resource>\r\n                <directory>src/main/java</directory>\r\n                <includes>\r\n                    <include>**/*.properties</include> <include>**/*.xml</include>\r\n                </includes>\r\n                <filtering>false</filtering>\r\n            </resource>\r\n            <resource>\r\n                <directory>src/main/resources</directory> <includes>\r\n                <include>**/*.properties</include> <include>**/*.xml</include>\r\n            </includes>\r\n                <filtering>false</filtering>\r\n            </resource>\r\n        </resources>\r\n    </build>\r\n```\r\n\r\n完整的pom.xml文件\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>org.xhn</groupId>\r\n    <artifactId>ssmbulid</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n\r\n<!--    依赖-->\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>junit</groupId>\r\n            <artifactId>junit</artifactId>\r\n            <version>4.12</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <version>5.1.47</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.servlet</groupId>\r\n            <artifactId>servlet-api</artifactId>\r\n            <version>2.5</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.servlet.jsp</groupId>\r\n            <artifactId>jsp-api</artifactId>\r\n            <version>2.1</version>\r\n        </dependency>\r\n<!--        c3p0数据库连接池-->\r\n        <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->\r\n        <dependency>\r\n            <groupId>com.mchange</groupId>\r\n            <artifactId>c3p0</artifactId>\r\n            <version>0.9.5.5</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.servlet</groupId>\r\n            <artifactId>jstl</artifactId>\r\n            <version>1.2</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.mybatis</groupId>\r\n            <artifactId>mybatis</artifactId>\r\n            <version>3.5.6</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.mybatis</groupId>\r\n            <artifactId>mybatis-spring</artifactId>\r\n            <version>2.0.6</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-webmvc</artifactId>\r\n            <version>5.2.12.RELEASE</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-jdbc</artifactId>\r\n            <version>5.3.2</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.aspectj</groupId>\r\n            <artifactId>aspectjweaver</artifactId>\r\n            <version>1.6.11</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n\r\n<!--    静态资源-->\r\n    <build>\r\n        <resources>\r\n            <resource>\r\n                <directory>src/main/java</directory>\r\n                <includes>\r\n                    <include>**/*.properties</include> <include>**/*.xml</include>\r\n                </includes>\r\n                <filtering>false</filtering>\r\n            </resource>\r\n            <resource>\r\n                <directory>src/main/resources</directory> <includes>\r\n                <include>**/*.properties</include> <include>**/*.xml</include>\r\n            </includes>\r\n                <filtering>false</filtering>\r\n            </resource>\r\n        </resources>\r\n    </build>\r\n\r\n\r\n</project>\r\n```\r\n\r\n创建相关的包：java目录下com.xhn\r\n\r\n在这下创建controller，dao,pojo,service\r\n\r\n###  框架搭建\r\n\r\n在pojo下创建一个实体类,先导入lombok依赖\r\n\r\n```xml\r\n<dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <version>1.18.16</version>\r\n        </dependency>\r\n    </dependencies>\r\n```\r\n\r\n```java\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class Books {\r\n\r\n    private int bookID;\r\n    private String bookName;\r\n    private int bookCounts;\r\n    private String detail;\r\n\r\n}\r\n\r\n```\r\n\r\n创建一个Mapper接口\r\n\r\n```java\r\npublic interface BookMapper {\r\n    //增加一本书\r\n    int addBook(Books books);\r\n    //删除一本书\r\n    int deleteBook(@Param(\"bookID\") int id);\r\n\r\n    //更新一本书\r\n    int updateBook(Books books);\r\n\r\n\r\n    //查询一本书、\r\n    Books queryBookById(@Param(\"bookID\") int id);\r\n\r\n    //查询所有的书\r\n    List<Books> queryAllBook();\r\n    \r\n}\r\n\r\n```\r\n\r\n用数据库实现\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF8\" ?>\r\n<!DOCTYPE mapper\r\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\r\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mapper namespace=\"com.xhn.dao.BookMapper\">\r\n    \r\n    <insert id=\"addBook\" parameterType=\"Books\">\r\n        insert into ssmbuild.books(bookName,bookCounts,detail)\r\n        value  (#{bookName},#{bookCounts},#{detail});\r\n    </insert>\r\n\r\n    <delete id=\"deleteBookById\" parameterType=\"int\">\r\n        delete from  ssmbuild.books where bookID = #{bookID}\r\n    </delete>\r\n    \r\n    <update id=\"updateBook\" parameterType=\"Books\">\r\n        update  ssmbuild.books\r\n        set bookName =#{bookName},bookCounts=#{bookCounts},detail=#{detail}\r\n        where bookID=#{bookID};\r\n    </update>\r\n    \r\n    \r\n    <select id=\"queryBookById\" resultType=\"Books\">\r\n        select * from ssmbuild.books where bookID=#{bookID}\r\n    </select>\r\n    \r\n    <select id=\"queryAllBook\" resultType=\"Books\">\r\n        select * from ssmbuild.books\r\n    </select>\r\n\r\n\r\n\r\n</mapper>\r\n```\r\n\r\n创建数据库配置文件database.properties\r\n\r\n```properties\r\njdbc.driver=com.mysql.jdbc.Driver\r\njdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&useUnicode=true&characterEncoding=utf8\r\njdbc.username=root\r\njdbc.password=root\r\n```\r\n\r\n以及配置文件mybatis-config.xml\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF8\" ?>\r\n<!DOCTYPE configuration\r\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\r\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\r\n<configuration>\r\n\r\n    <typeAliases>\r\n        <package name=\"com.xhn.pojo\"/>\r\n    </typeAliases>\r\n\r\n    <mappers>\r\n        <mapper class=\"com.xhn.dao.BookMapper\"/>\r\n    </mappers>\r\n\r\n</configuration>\r\n```\r\n\r\n创建BookService在service包下\r\n\r\n```java\r\npublic interface BookService {\r\n    //增加一本书\r\n    int addBook(Books books);\r\n    //删除一本书\r\n    int deleteBook(int id);\r\n\r\n    //更新一本书\r\n    int updateBook(Books books);\r\n\r\n\r\n    //查询一本书、\r\n    Books queryBookById(int id);\r\n\r\n    //查询所有的书\r\n    List<Books> queryAllBook();\r\n\r\n}\r\n\r\n```\r\n\r\n实现这个接口 BookServiceImpl\r\n\r\n```java\r\npublic class BookServiceImpl implements BookService{\r\n\r\n    @Setter\r\n    private BookMapper bookMapper;\r\n\r\n\r\n\r\n    public int addBook(Books books) {\r\n        return bookMapper.addBook(books);\r\n    }\r\n\r\n    public int deleteBook(int id) {\r\n        return bookMapper.deleteBook(id);\r\n    }\r\n\r\n    public int updateBook(Books books) {\r\n        return updateBook(books);\r\n    }\r\n\r\n    public Books queryBookById(int id) {\r\n        return bookMapper.queryBookById(id);\r\n    }\r\n\r\n    public List<Books> queryAllBook() {\r\n        return bookMapper.queryAllBook();\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n创建spring-dao.xml文件\r\n\r\n配置spring-dao.xml\r\n\r\n```xml\r\n<!--    关联数据库配置文件-->\r\n    <context:property-placeholder location=\"classpath:database.properties\"/>\r\n```\r\n\r\n```xml\r\n<!--    连接池-->\r\n    <!-- 2.数据库连接池    -->\r\n    <!--数据库连接池\r\n    dbcp  半自动化操作         不能自动连接\r\n    c3p0  自动化操作（自动的加载配置文件    并且设置到对象里面）\r\n    -->\r\n    <bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\">\r\n        <property name=\"driverClass\" value=\"${jdbc.driver}\"/>\r\n        <property name=\"jdbcUrl\" value=\"${jdbc.url}\"/>\r\n        <property name=\"user\" value=\"${jdbc.username}\"/>\r\n        <property name=\"password\" value=\"${jdbc.password}\"/>\r\n\r\n        <!-- c3p0连接池的私有属性    -->\r\n        <property name=\"maxPoolSize\" value=\"30\"/>\r\n        <property name=\"minPoolSize\" value=\"10\"/>\r\n        <!-- 关闭连接后不自动commit -->\r\n        <property name=\"autoCommitOnClose\" value=\"false\"/>\r\n        <!-- 获取连接超时时间    -->\r\n        <property name=\"checkoutTimeout\" value=\"10000\"/>\r\n        <!-- 当获取连接失败重试次数    -->\r\n        <property name=\"acquireRetryAttempts\" value=\"2\"/>\r\n\r\n    </bean>\r\n<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\r\n        <property name=\"dataSource\" ref=\"dataSource\"/>\r\n<!--        绑定mybatis的配置文件-->\r\n    <property name=\"configLocation\" value=\"classpath:mybatis-config.xml\"/>\r\n    </bean>\r\n\r\n<!--    配置dao接口扫描包-->\r\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\r\n        <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\"/>\r\n        <property name=\"basePackage\" value=\"com.xhn.dao\"/>\r\n    </bean>\r\n\r\n```\r\n\r\n完整的spring-dao.xml文件\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xmlns:context=\"http://www.springframework.org/schema/context\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n       http://www.springframework.org/schema/beans/spring-beans.xsd\r\n       http://www.springframework.org/schema/context\r\n       https://www.springframework.org/schema/context/spring-context.xsd\">\r\n\r\n<!--    关联数据库配置文件-->\r\n    <context:property-placeholder location=\"classpath:database.properties\"/>\r\n<!--    连接池-->\r\n    <!-- 2.数据库连接池    -->\r\n    <!--数据库连接池\r\n    dbcp  半自动化操作         不能自动连接\r\n    c3p0  自动化操作（自动的加载配置文件    并且设置到对象里面）\r\n    -->\r\n    <bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\">\r\n        <property name=\"driverClass\" value=\"${jdbc.driver}\"/>\r\n        <property name=\"jdbcUrl\" value=\"${jdbc.url}\"/>\r\n        <property name=\"user\" value=\"${jdbc.username}\"/>\r\n        <property name=\"password\" value=\"${jdbc.password}\"/>\r\n\r\n        <!-- c3p0连接池的私有属性    -->\r\n        <property name=\"maxPoolSize\" value=\"30\"/>\r\n        <property name=\"minPoolSize\" value=\"10\"/>\r\n        <!-- 关闭连接后不自动commit -->\r\n        <property name=\"autoCommitOnClose\" value=\"false\"/>\r\n        <!-- 获取连接超时时间    -->\r\n        <property name=\"checkoutTimeout\" value=\"10000\"/>\r\n        <!-- 当获取连接失败重试次数    -->\r\n        <property name=\"acquireRetryAttempts\" value=\"2\"/>\r\n\r\n    </bean>\r\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\r\n        <property name=\"dataSource\" ref=\"dataSource\"/>\r\n<!--        绑定mybatis的配置文件-->\r\n    <property name=\"configLocation\" value=\"classpath:mybatis-config.xml\"/>\r\n    </bean>\r\n\r\n<!--    配置dao接口扫描包-->\r\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\r\n        <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\"/>\r\n        <property name=\"basePackage\" value=\"com.xhn.dao\"/>\r\n    </bean>\r\n\r\n\r\n\r\n</beans>\r\n```\r\n\r\n配置spring-service.xml\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xmlns:context=\"http://www.springframework.org/schema/context\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans \r\n       http://www.springframework.org/schema/beans/spring-beans.xsd \r\n       http://www.springframework.org/schema/context \r\n       https://www.springframework.org/schema/context/spring-context.xsd\">\r\n\r\n<!--    扫描service下的包-->\r\n    <context:component-scan base-package=\"com.xhn.service\"/>\r\n\r\n    <bean id=\"BookServiceImpl\" class=\"com.xhn.service.BookServiceImpl\">\r\n        <property name=\"bookMapper\" ref=\"bookMapper\"/>\r\n    </bean>\r\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n<!--        注入数据源-->\r\n        <property name=\"dataSource\" ref=\"dataSource\"/>\r\n    </bean>\r\n\r\n<!--    aop事务支持-->\r\n\r\n\r\n</beans>\r\n```\r\n\r\nspring-mvc\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\r\n       xmlns:context=\"http://www.springframework.org/schema/context\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n       http://www.springframework.org/schema/beans/spring-beans.xsd\r\n       http://www.springframework.org/schema/mvc\r\n       https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\">\r\n\r\n    <mvc:annotation-driven/>\r\n    <mvc:default-servlet-handler/>\r\n    <context:component-scan base-package=\"com.xhn.controller\"/>\r\n    <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\r\n        <property name=\"prefix\" value=\"/WEB-INF/jsp/\"/>\r\n        <property name=\"suffix\" value=\".jsp\"/>\r\n    </bean>\r\n\r\n\r\n</beans>\r\n```\r\n\r\nweb.xml\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\r\n         version=\"4.0\">\r\n\r\n    <servlet>\r\n        <servlet-name>springmvc</servlet-name>\r\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\r\n        <init-param>\r\n            <param-name>contextConfigLocation</param-name>\r\n            <param-value>classpath:applicationContext.xml</param-value>\r\n        </init-param>\r\n        <load-on-startup>1</load-on-startup>\r\n    </servlet>\r\n    <servlet-mapping>\r\n        <servlet-name>springmvc</servlet-name>\r\n        <url-pattern>/</url-pattern>\r\n    </servlet-mapping>\r\n    \r\n    \r\n    <filter>\r\n        <filter-name>encodingFilter</filter-name>\r\n        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\r\n        <init-param>\r\n            <param-name>encoding</param-name>\r\n            <param-value>utf-8</param-value>\r\n        </init-param>\r\n    </filter>\r\n\r\n    <filter-mapping>\r\n        <filter-name>encodingFilter</filter-name>\r\n        <url-pattern>/*</url-pattern>\r\n    </filter-mapping>\r\n\r\n    <session-config>\r\n        <session-timeout>15</session-timeout>\r\n    </session-config>\r\n\r\n\r\n</web-app>\r\n```\r\n\r\n### 构建Mapper接口与SQL语句\r\n\r\n```java\r\npublic interface BookMapper {\r\n    //增加一本书\r\n    int addBook(Books books);\r\n    //删除一本书\r\n    int deleteBook(@Param(\"bookID\") int id);\r\n\r\n    //更新一本书\r\n    int updateBook(Books books);\r\n\r\n\r\n    //查询一本书、\r\n    Books queryBookById(@Param(\"bookID\") int id);\r\n\r\n    //查询所有的书\r\n    List<Books> queryAllBook();\r\n\r\n    List<Books> queryBookByName(String bookName);\r\n\r\n}\r\n\r\n```\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF8\" ?>\r\n<!DOCTYPE mapper\r\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\r\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mapper namespace=\"com.xhn.dao.BookMapper\">\r\n    \r\n    <insert id=\"addBook\" parameterType=\"Books\">\r\n        insert into ssmbuild.books(bookName,bookCounts,detail)\r\n        value  (#{bookName},#{bookCounts},#{detail});\r\n    </insert>\r\n\r\n    <delete id=\"deleteBook\" parameterType=\"int\">\r\n        delete from  ssmbuild.books where bookID = #{bookID}\r\n    </delete>\r\n    \r\n    <update id=\"updateBook\" parameterType=\"Books\">\r\n        update  ssmbuild.books\r\n        set bookName=#{bookName},bookCounts=#{bookCounts},detail=#{detail}\r\n        where bookID=#{bookID};\r\n    </update>\r\n    \r\n    \r\n    <select id=\"queryBookById\" resultType=\"Books\">\r\n        select * from ssmbuild.books where bookID=#{bookID}\r\n    </select>\r\n    \r\n    <select id=\"queryAllBook\" resultType=\"Books\">\r\n        select * from ssmbuild.books\r\n    </select>\r\n\r\n    <select id=\"queryBookByName\" resultType=\"Books\">\r\n        select * from ssmbuild.books where bookName like CONCAT(CONCAT(\'%\',#{bookName}),\'%\')\r\n    </select>\r\n\r\n\r\n\r\n</mapper>\r\n```\r\n\r\n记得在mybatis-config中注册这个文件\r\n\r\n```xml\r\n<mappers>\r\n        <mapper class=\"com.xhn.dao.BookMapper\"/>\r\n</mappers>\r\n```\r\n\r\n### service\r\n\r\n先实现service的接口\r\n\r\n```xml\r\npublic interface BookService {\r\n    //增加一本书\r\n    int addBook(Books books);\r\n    //删除一本书\r\n    int deleteBook(int id);\r\n\r\n    //更新一本书\r\n    int updateBook(Books books);\r\n\r\n\r\n    //查询一本书、\r\n    Books queryBookById(int id);\r\n\r\n    //查询所有的书\r\n    List<Books> queryAllBook();\r\n\r\n    List<Books> queryBookByName(String bookName);\r\n\r\n}\r\n\r\n```\r\n\r\n对应实现类\r\n\r\n```xml\r\n@Service\r\npublic class BookServiceImpl implements BookService{\r\n\r\n    @Autowired\r\n\r\n    @Setter\r\n    private BookMapper bookMapper;\r\n\r\n\r\n\r\n    public int addBook(Books books) {\r\n        return bookMapper.addBook(books);\r\n    }\r\n\r\n    public int deleteBook(int id) {\r\n        return bookMapper.deleteBook(id);\r\n    }\r\n\r\n    public int updateBook(Books books) {\r\n        return bookMapper.updateBook(books);\r\n    }\r\n\r\n    public Books queryBookById(int id) {\r\n        return bookMapper.queryBookById(id);\r\n    }\r\n\r\n    public List<Books> queryAllBook() {\r\n        return bookMapper.queryAllBook();\r\n    }\r\n\r\n    public List<Books> queryBookByName(String bookName) {\r\n        return bookMapper.queryBookByName(bookName);\r\n    }\r\n}\r\n\r\n```\r\n\r\n### 实现Controller\r\n\r\n```java\r\npackage com.xhn.controller;\r\n\r\nimport com.xhn.pojo.Books;\r\nimport com.xhn.service.BookService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Qualifier;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\n\r\nimport java.awt.print.Book;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author xhn\r\n * @data 2021/1/21 - 19:22\r\n */\r\n@Controller\r\n@RequestMapping(\"/book\")\r\npublic class BookController {\r\n\r\n    @Autowired\r\n    @Qualifier(\"BookServiceImpl\")\r\n    private BookService bookService;\r\n\r\n    //查询所有书籍\r\n    @RequestMapping(\"/all\")\r\n    public String list(Model model){\r\n\r\n        List<Books> list=bookService.queryAllBook();\r\n        model.addAttribute(\"list\",list);\r\n        return \"allBook\";\r\n    }\r\n\r\n\r\n    //新增书籍\r\n    @RequestMapping(\"/toAddBook\")\r\n    public String toAddPaper(){\r\n        return \"addBook\";\r\n    }\r\n\r\n\r\n    //添加书籍的请求\r\n    @RequestMapping(\"/addBook\")\r\n    public String addBook(Books books){\r\n        System.out.println(\"addBook======>>\"+books);\r\n        bookService.addBook(books);\r\n        return \"redirect:/book/all\";\r\n    }\r\n\r\n    //跳转到修改页面\r\n    @RequestMapping(\"/toUpdatePaper\")\r\n    public String toUpdatePaper(int id,Model model){\r\n        Books books = bookService.queryBookById(id);\r\n        model.addAttribute(\"QBook\",books);\r\n        return \"updateBook\";\r\n    }\r\n\r\n\r\n    //修改书籍\r\n\r\n    @RequestMapping(\"/updateBooks\")\r\n    public String updateBooks(Books books){\r\n        System.out.println(\"updateBook======>>>\"+books);\r\n        bookService.updateBook(books);\r\n        return \"redirect:/book/all\";\r\n\r\n    }\r\n\r\n\r\n    @RequestMapping(\"/deleteBook/{bookID}\")\r\n    public String deleteBook(@PathVariable(\"bookID\") int id){\r\n        bookService.deleteBook(id);\r\n        return \"redirect:/book/all\";\r\n\r\n    }\r\n\r\n\r\n    //查询一本书\r\n    @RequestMapping(\"/search\")\r\n    public String queryBook(String queryBookName,Model model){\r\n        List<Books> list = bookService.queryBookByName(queryBookName);\r\n        model.addAttribute(\"list\",list);\r\n        return \"allBook\";\r\n\r\n\r\n    }\r\n\r\n}\r\n```\r\n\r\n### 前端页面\r\n\r\nindex\r\n\r\n```jsp\r\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\r\n<html>\r\n  <head>\r\n    <title>首页</title>\r\n    <style>\r\n      h3{\r\n        width: 180px;\r\n        height: 50px;\r\n        margin: 270px auto;\r\n        text-align: center;\r\n        line-height: 50px;\r\n        background: deepskyblue;\r\n        border-radius: 5px;\r\n\r\n      }\r\n      a{\r\n        text-decoration: none;\r\n        color: black;\r\n        font-size: 18px;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n  <h3>\r\n    <a href=\"${pageContext.request.contextPath}/book/all\">进入书籍页面</a>\r\n  </h3>\r\n  </body>\r\n</html>\r\n\r\n```\r\n\r\nallBook所有书籍\r\n\r\n```jsp\r\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\r\n\r\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\r\n<html>\r\n<head>\r\n    <title>所有书籍</title>\r\n    <link href=\"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n</head>\r\n<body>\r\n<div class=\"container\">\r\n\r\n    <div class=\"row clearfix\">\r\n        <div class=\"col-md-12 column\">\r\n            <div class=\"page-header\">\r\n                <h1>\r\n                    <small>书籍列表--------显示所有书籍</small>\r\n                </h1>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-md-4 column\" >\r\n            <a class=\"btn btn-primary\" href=\"${pageContext.request.contextPath}/book/toAddBook\">新增书籍</a>\r\n            <a class=\"btn btn-primary\" href=\"${pageContext.request.contextPath}/book/all\">所有</a>\r\n        </div>\r\n        <div class=\"col-md-4 column\" ></div>\r\n        <div class=\"col-md-4 column\" >\r\n            <form action=\"${pageContext.request.contextPath}/book/search\" method=\"post\" style=\"display: flex;justify-content: center\">\r\n                <input type=\"text\" name=\"queryBookName\" class=\"form-control\" placeholder=\"search.....\">\r\n                <input type=\"submit\" value=\"查询\" class=\"btn btn-primary\">\r\n            </form>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row clearfix\">\r\n        <div class=\"col-md-12 column\">\r\n            <table class=\"table table-hover table-striped\">\r\n                <thead>\r\n                <tr>\r\n                    <th>书籍编号</th>\r\n                    <th>书籍名称</th>\r\n                    <th>书籍数量</th>\r\n                    <th>书籍详情</th>\r\n                    <th>操作</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                <c:forEach var=\"book\" items=\"${list}\">\r\n                    <tr>\r\n                        <td>${book.bookID}</td>\r\n                        <td>${book.bookName}</td>\r\n                        <td>${book.bookCounts}</td>\r\n                        <td>${book.detail}</td>\r\n                        <td>\r\n                            <a href=\"${pageContext.request.contextPath}/book/toUpdatePaper?id=${book.bookID}\">修改</a>\r\n                            &nbsp; | &nbsp;\r\n                            <a href=\"${pageContext.request.contextPath}/book/deleteBook/${book.bookID}\">删除</a>\r\n                        </td>\r\n                    </tr>\r\n                </c:forEach>\r\n\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n</body>\r\n</html>\r\n\r\n```\r\n\r\n\r\n\r\naddBook添加\r\n\r\n```jsp\r\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\r\n<html>\r\n<head>\r\n    <title>新增</title>\r\n    <link href=\"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n</head>\r\n<body>\r\n<div class=\"container\">\r\n\r\n    <div class=\"row clearfix\">\r\n        <div class=\"col-md-12 column\">\r\n            <div class=\"page-header\">\r\n                <h1>\r\n                    <small>新增书籍</small>\r\n                </h1>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <form method=\"post\" action=\"${pageContext.request.contextPath}/book/addBook\">\r\n        <div class=\"form-group\">\r\n            <label>书籍名称</label>\r\n            <input type=\"text\" name=\"bookName\" class=\"form-control\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label >书籍数量</label>\r\n            <input type=\"text\" name=\"bookCounts\" class=\"form-control\" >\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label >书籍描述</label>\r\n            <input type=\"text\" name=\"detail\" class=\"form-control\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input type=\"submit\" class=\"form-control\" value=\"添加\">\r\n        </div>\r\n\r\n    </form>\r\n\r\n\r\n</div>\r\n\r\n</body>\r\n</html>\r\n\r\n```\r\n\r\n更新update\r\n\r\n```jsp\r\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\r\n<html>\r\n<head>\r\n    <title>修改</title>\r\n    <link href=\"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n</head>\r\n<body>\r\n<div class=\"container\">\r\n\r\n    <div class=\"row clearfix\">\r\n        <div class=\"col-md-12 column\">\r\n            <div class=\"page-header\">\r\n                <h1>\r\n                    <small>修改书籍</small>\r\n                </h1>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <form method=\"post\" action=\"${pageContext.request.contextPath}/book/updateBooks\">\r\n        <input type=\"hidden\" name=\"bookID\" value=\"${QBook.bookID}\">\r\n        <div class=\"form-group\">\r\n\r\n            <label>书籍名称</label>\r\n            <input type=\"text\" name=\"bookName\" class=\"form-control\" value=\"${QBook.bookName}\" >\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label >书籍数量</label>\r\n            <input type=\"text\" name=\"bookCounts\" class=\"form-control\" value=\"${QBook.bookCounts}\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label >书籍描述</label>\r\n            <input type=\"text\" name=\"detail\" class=\"form-control\" value=\"${QBook.detail}\">\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n            <input type=\"submit\" class=\"form-control\" value=\"修改\">\r\n        </div>\r\n\r\n\r\n    </form>\r\n\r\n\r\n</div>\r\n</body>\r\n</html>\r\n\r\n```\r\n\r\n### 总结\r\n\r\n这是一个整合SSM框架的小项目，实现了基本的增删改查的功能，前端用到了bootstrap，这只是实现了基本的功能，当然在这个里面还是有一些有点小疑惑，就是前面的配置的一些问题，现在也基本的知道了SpringMVC，Spring，Mybatis在这个框架当中各自有什么的作用了，也遇到了几个小问题，比如在service的实现类 中，自己调用了自己，导致栈溢出，还爆出了具体的位置，但还是找了一些才明白\r\n\r\n，还有就是那个搜索的那里用了模糊查询，但是返回的确实Books对象，所以也报错，然后改成了List，这个到时很快的解决了，在复习复习。', '2021-01-21 15:20:14.894000', 'https://picsum.photos/id/1000/800/450', '原创', b'1', b'1', b'1', 'SSM框架整合', '2021-01-21 15:20:57.905000', 66, 92, 1, '整合SSM框架，实现SSM框架的具体应用');
INSERT INTO `t_blog` VALUES (96, '1', '1', '# JDBC\r\n\r\n在application.yml中配置\r\n\r\n```yml\r\nspring:\r\n  datasource:\r\n    username: root\r\n    password: root\r\n    url: jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8\r\n    driver-class-name: com.mysql.jdbc.Driver\r\n```\r\n\r\n可以先测试一下url不加时区\r\n\r\n```yml\r\njdbc:mysql://localhost:3306/mybatis?useUnicode=true&characterEncoding=utf-8\r\n```\r\n\r\n如果报错\r\n\r\n[![http://www.xhnya.top//upload/0b795070-0ad7-4040-8330-2acdda67ea23.png](http://www.xhnya.top//upload/0b795070-0ad7-4040-8330-2acdda67ea23.png \"http://www.xhnya.top//upload/0b795070-0ad7-4040-8330-2acdda67ea23.png\")](http://www.xhnya.top//upload/0b795070-0ad7-4040-8330-2acdda67ea23.png \"http://www.xhnya.top//upload/0b795070-0ad7-4040-8330-2acdda67ea23.png\")\r\n那么就改为\r\n\r\n```yml\r\njdbc:mysql://localhost:3306/mybatis?useUnicode=true&characterEncoding=utf-8\r\n```\r\n\r\n然后测试连接,自动注入DataSource\r\n\r\n```java\r\n@Autowired\r\n    DataSource dataSource;\r\n\r\n    @Test\r\n    void contextLoads() throws SQLException {\r\n        System.out.println(dataSource.getClass());\r\n\r\n        //获得数据库连接\r\n        Connection connection = dataSource.getConnection();\r\n        System.out.println(connection);\r\n        connection.close();\r\n\r\n    }\r\n```\r\n\r\n[![http://www.xhnya.top/upload/611b8047-8528-4791-be31-d6391222762d.png](http://www.xhnya.top/upload/611b8047-8528-4791-be31-d6391222762d.png \"http://www.xhnya.top/upload/611b8047-8528-4791-be31-d6391222762d.png\")](http://www.xhnya.top/upload/611b8047-8528-4791-be31-d6391222762d.png \"http://www.xhnya.top/upload/611b8047-8528-4791-be31-d6391222762d.png\")\r\n\r\n测试成功\r\n\r\n编写一个controller类\r\n[![http://www.xhnya.top/upload/8e4d6c56-efdc-4547-a67c-88218e8a4e4a.png](http://www.xhnya.top/upload/8e4d6c56-efdc-4547-a67c-88218e8a4e4a.png \"http://www.xhnya.top/upload/8e4d6c56-efdc-4547-a67c-88218e8a4e4a.png\")](http://www.xhnya.top/upload/8e4d6c56-efdc-4547-a67c-88218e8a4e4a.png \"http://www.xhnya.top/upload/8e4d6c56-efdc-4547-a67c-88218e8a4e4a.png\")\r\n\r\n```java\r\n@RestController\r\npublic class JdbcController {\r\n\r\n    @Autowired\r\n    JdbcTemplate jdbcTemplate;\r\n\r\n    //查询数据库的所有信息\r\n    //没有实体类，数据库中东西，通过Map来获取\r\n    @GetMapping(\"/maps\")\r\n    public List<Map<String,Object>> userList(){\r\n        String sql=\"select * from user\";\r\n        List<Map<String, Object>> maps = jdbcTemplate.queryForList(sql);\r\n        return maps;\r\n\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n启动SpringBoot的启动类，然后在游览器访问\r\n\r\n[![http://www.xhnya.top/upload/bf76400c-a2b1-4ccf-9278-e64e7587d850.png](http://www.xhnya.top/upload/bf76400c-a2b1-4ccf-9278-e64e7587d850.png \"http://www.xhnya.top/upload/bf76400c-a2b1-4ccf-9278-e64e7587d850.png\")](http://www.xhnya.top/upload/bf76400c-a2b1-4ccf-9278-e64e7587d850.png \"http://www.xhnya.top/upload/bf76400c-a2b1-4ccf-9278-e64e7587d850.png\")\r\n\r\n添加一个数据，在JdbcController中添加\r\n\r\n```java\r\n@GetMapping(\"/addUser\")\r\n    public String addUser(){\r\n        String sql=\"insert into mybatis.user(id,name,pwd) values (6,\'xhn06\',\'123456\')\";\r\n        jdbcTemplate.update(sql);\r\n        return \"succeed\";\r\n    }\r\n```\r\n\r\n[![http://www.xhnya.top/upload/150f1cea-73ff-4a11-9cc5-bc2c66a7e60d.png](http://www.xhnya.top/upload/150f1cea-73ff-4a11-9cc5-bc2c66a7e60d.png \"http://www.xhnya.top/upload/150f1cea-73ff-4a11-9cc5-bc2c66a7e60d.png\")](http://www.xhnya.top/upload/150f1cea-73ff-4a11-9cc5-bc2c66a7e60d.png \"http://www.xhnya.top/upload/150f1cea-73ff-4a11-9cc5-bc2c66a7e60d.png\")\r\n\r\n页面成功\r\n\r\n[![http://www.xhnya.top/upload/754c4967-7546-4349-8b0c-62e888f191f1.png](http://www.xhnya.top/upload/754c4967-7546-4349-8b0c-62e888f191f1.png \"http://www.xhnya.top/upload/754c4967-7546-4349-8b0c-62e888f191f1.png\")](http://www.xhnya.top/upload/754c4967-7546-4349-8b0c-62e888f191f1.png \"http://www.xhnya.top/upload/754c4967-7546-4349-8b0c-62e888f191f1.png\")\r\n\r\n数据库\r\n[![http://www.xhnya.top/upload/35efc832-1a34-4957-a318-06f4f44e73d1.png](http://www.xhnya.top/upload/35efc832-1a34-4957-a318-06f4f44e73d1.png \"http://www.xhnya.top/upload/35efc832-1a34-4957-a318-06f4f44e73d1.png\")](http://www.xhnya.top/upload/35efc832-1a34-4957-a318-06f4f44e73d1.png \"http://www.xhnya.top/upload/35efc832-1a34-4957-a318-06f4f44e73d1.png\")\r\n测试更新\r\n\r\n增加方法\r\n\r\n```java\r\n   @GetMapping(\"/update/{id}\")\r\n    public String update(@PathVariable(\"id\") int id){\r\n        String sql=\"update mybatis.user set name=? , pwd=? where id=\"+id;\r\n        Object[] objects =new  Object[2];\r\n        objects[0] = \"xhn006\";\r\n        objects[1] = \"123456789\";\r\n        jdbcTemplate.update(sql,objects);\r\n\r\n        return \"succeed\";\r\n    }\r\n```\r\n\r\n游览器测试成功\r\n\r\n[![http://www.xhnya.top/upload/9d9a6c53-cc1b-4e0c-8c8f-d3116a50edb5.png](http://www.xhnya.top/upload/9d9a6c53-cc1b-4e0c-8c8f-d3116a50edb5.png \"http://www.xhnya.top/upload/9d9a6c53-cc1b-4e0c-8c8f-d3116a50edb5.png\")](http://www.xhnya.top/upload/9d9a6c53-cc1b-4e0c-8c8f-d3116a50edb5.png \"http://www.xhnya.top/upload/9d9a6c53-cc1b-4e0c-8c8f-d3116a50edb5.png\")\r\n\r\n测试删除，增加方法\r\n\r\n```java\r\n @GetMapping(\"/delete/{id}\")\r\n    public String delete(@PathVariable(\"id\")int id){\r\n        String sql=\"delete from mybatis.user where id=?\";\r\n        jdbcTemplate.update(sql,id);\r\n        return \"succeed\";\r\n    }\r\n```\r\n\r\n同样测试成功\r\n\r\n[![http://www.xhnya.top/upload/d3e9624d-5641-4a7b-9746-7502b5713845.png](http://www.xhnya.top/upload/d3e9624d-5641-4a7b-9746-7502b5713845.png \"http://www.xhnya.top/upload/d3e9624d-5641-4a7b-9746-7502b5713845.png\")](http://www.xhnya.top/upload/d3e9624d-5641-4a7b-9746-7502b5713845.png \"http://www.xhnya.top/upload/d3e9624d-5641-4a7b-9746-7502b5713845.png\")\r\n\r\n最后的数据库样子\r\n\r\n[![http://www.xhnya.top/upload/deef9afb-9c9a-4e51-8bf6-dcd952fc4caf.png](http://www.xhnya.top/upload/deef9afb-9c9a-4e51-8bf6-dcd952fc4caf.png \"http://www.xhnya.top/upload/deef9afb-9c9a-4e51-8bf6-dcd952fc4caf.png\")](http://www.xhnya.top/upload/deef9afb-9c9a-4e51-8bf6-dcd952fc4caf.png \"http://www.xhnya.top/upload/deef9afb-9c9a-4e51-8bf6-dcd952fc4caf.png\")\r\n\r\n完整的controller代码\r\n\r\n```java\r\npackage com.xhn.controller;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.jdbc.core.JdbcTemplate;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * @author xhn\r\n * @data 2021/1/25 - 20:14\r\n */\r\n@RestController\r\npublic class JdbcController {\r\n\r\n    @Autowired\r\n    JdbcTemplate jdbcTemplate;\r\n\r\n    //查询数据库的所有信息\r\n    //没有实体类，数据库中东西，通过Map来获取\r\n    @GetMapping(\"/maps\")\r\n    public List<Map<String,Object>> userList(){\r\n        String sql=\"select * from user\";\r\n        List<Map<String, Object>> maps = jdbcTemplate.queryForList(sql);\r\n        return maps;\r\n\r\n    }\r\n\r\n    @GetMapping(\"/addUser\")\r\n    public String addUser(){\r\n        String sql=\"insert into mybatis.user(id,name,pwd) values (6,\'xhn06\',\'123456\')\";\r\n        jdbcTemplate.update(sql);\r\n        return \"succeed\";\r\n    }\r\n\r\n    @GetMapping(\"/update/{id}\")\r\n    public String update(@PathVariable(\"id\") int id){\r\n        String sql=\"update mybatis.user set name=? , pwd=? where id=\"+id;\r\n        Object[] objects =new  Object[2];\r\n        objects[0] = \"xhn006\";\r\n        objects[1] = \"123456789\";\r\n        jdbcTemplate.update(sql,objects);\r\n\r\n        return \"succeed\";\r\n    }\r\n\r\n    @GetMapping(\"/delete/{id}\")\r\n    public String delete(@PathVariable(\"id\")int id){\r\n        String sql=\"delete from mybatis.user where id=?\";\r\n        jdbcTemplate.update(sql,id);\r\n        return \"succeed\";\r\n    }\r\n}\r\n\r\n```\r\n', '2021-01-25 13:55:24.715000', 'https://picsum.photos/id/1025/800/450', '原创', b'1', b'1', b'1', 'SpringBoot整合JDBC', '2021-01-25 13:55:24.715000', 83, 93, 1, '这里是关于SpringBoot整合JDBC的一些操作');
INSERT INTO `t_blog` VALUES (98, '1', '1', '# Mybatis-plus\r\n\r\n## 简介\r\n\r\n[![404](http://www.xhnya.top//upload/8e4cfd9a-15cd-4cfb-a226-7c1efd92f75d.png \"404\")](http://www.xhnya.top//upload/8e4cfd9a-15cd-4cfb-a226-7c1efd92f75d.png \"404\")\r\n> 特性\r\n\r\n- **无侵入**：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑\r\n- **损耗小**：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作\r\n- **强大的 CRUD 操作**：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求\r\n- **支持 Lambda 形式调用**：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错\r\n- **支持主键自动生成**：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题\r\n- **支持 ActiveRecord 模式**：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作\r\n- **支持自定义全局通用操作**：支持全局通用方法注入（ Write once, use anywhere ）\r\n- **内置代码生成器**：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用\r\n- **内置分页插件**：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询\r\n- **分页插件支持多种数据库**：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库\r\n- **内置性能分析插件**：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询\r\n- **内置全局拦截插件**：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作\r\n\r\n## 快速开始\r\n\r\n### 创建数据库\r\n\r\n1. 建立mybatis_plus库\r\n2. 建立user表\r\n\r\n```sql\r\nDROP TABLE IF EXISTS user;\r\n\r\nCREATE TABLE user\r\n(\r\n	id BIGINT(20) NOT NULL COMMENT \'主键ID\',\r\n	name VARCHAR(30) NULL DEFAULT NULL COMMENT \'姓名\',\r\n	age INT(11) NULL DEFAULT NULL COMMENT \'年龄\',\r\n	email VARCHAR(50) NULL DEFAULT NULL COMMENT \'邮箱\',\r\n	PRIMARY KEY (id)\r\n);\r\n```\r\n\r\n3. 添加数据\r\n\r\n```sql\r\nDELETE FROM user;\r\n\r\nINSERT INTO user (id, name, age, email) VALUES\r\n(1, \'Jone\', 18, \'test1@baomidou.com\'),\r\n(2, \'Jack\', 20, \'test2@baomidou.com\'),\r\n(3, \'Tom\', 28, \'test3@baomidou.com\'),\r\n(4, \'Sandy\', 21, \'test4@baomidou.com\'),\r\n(5, \'Billie\', 24, \'test5@baomidou.com\');\r\n```\r\n\r\n### 创建项目\r\n\r\n```xml\r\n <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <version>1.18.16</version>\r\n        </dependency>\r\n        <!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter -->\r\n        <dependency>\r\n            <groupId>com.baomidou</groupId>\r\n            <artifactId>mybatis-plus-boot-starter</artifactId>\r\n            <version>3.4.2</version>\r\n        </dependency>\r\n```\r\n\r\n导入依赖\r\nmybatis-plus可以让我们不用再写一些基本的语句，比如增删改查\r\n\r\n### 编写配置文件\r\n\r\n编写SpringBoot的配置文件和数据库连接\r\n\r\n```properties\r\nspring.datasource.username=root\r\nspring.datasource.password=root\r\nspring.datasource.url=jdbc:mysql://localhost:3306/mybatis_plus?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai\r\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\r\n```\r\n\r\n### 开始测试\r\n\r\n编写一个实体类User\r\n\r\n```java\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class User {\r\n\r\n    private Long id;\r\n    private String name;\r\n    private Integer age;\r\n    private String email;\r\n\r\n\r\n}\r\n\r\n```\r\n\r\n编写一个Mapper，继承BaseMapper<User>\r\n\r\n```java\r\n@Mapper\r\n@Repository\r\npublic interface UserMapper extends BaseMapper<User> {\r\n\r\n}\r\n\r\n```\r\n\r\n开始测试\r\n\r\n```java\r\n@SpringBootTest\r\nclass MybatisPlusApplicationTests {\r\n\r\n    @Autowired\r\n    UserMapper userMapper;\r\n\r\n    @Test\r\n    void contextLoads() {\r\n        List<User> userList = userMapper.selectList(null);\r\n        userList.forEach(System.out::println);\r\n\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n [![404](http://www.xhnya.top//upload/f1263e90-b417-46b6-adf1-daddafad424e.png \"404\")](http://www.xhnya.top//upload/f1263e90-b417-46b6-adf1-daddafad424e.png \"404\")\r\n\r\n\r\n\r\n可以看到我们完全没有使用SQL语句，就完成了这一系列的操作，这个语句就类似jpa', '2021-01-27 13:49:57.986000', 'https://picsum.photos/seed/picsum/800/450', '原创', b'1', b'1', b'1', 'Mybatis-plus快速开始', '2021-01-27 13:49:57.986000', 71, 82, 1, '关于mybatis-plus的快速使用，可以让你深刻的体会到Mybatis-plus的快捷，强大之处');
INSERT INTO `t_blog` VALUES (100, '1', '1', '# JSON\r\n\r\n前后端分离时代：\r\n\r\n后端部署后端，提供接口，提供数据\r\n\r\nJSON\r\n\r\n前端独立部署，负责渲染模板\r\n\r\n### 什么是Json\r\n\r\n- JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广 泛。 \r\n- 采用完全独立于编程语言的文本格式来存储和表示数据。 \r\n- 简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 \r\n- 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率\r\n\r\n在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例 如字符串、数字、对象、数组等。看看他的要求和语法格式： \r\n\r\n+ 对象表示为键值对，数据由逗号分隔 \r\n+ 花括号保存对象 \r\n+ 保存数组 \r\n\r\nJSON 键值对是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组 合中的键名写在前面并用双引号 \"\" 包裹，使用冒号 : 分隔，然后紧接着值\r\n\r\n```javascript\r\n{\"name\": \"xhn\"} \r\n{\"age\": \"18\"} \r\n{\"sex\": \"男\"}\r\n```\r\n\r\n很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解： \r\nJSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。\r\n\r\n```javascript\r\nvar obj = {a: \'Hello\', b: \'World\'}; //这是一个对象，注意键名也是可以使用引号包裹 的 \r\nvar json = \'{\"a\": \"Hello\", \"b\": \"World\"}\'; //这是一个JSON 字符串，本质是一个字符串\r\n```\r\n\r\nJSON 和 JavaScript 对象互转,\r\n\r\n+ 要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法\r\n\r\n+ 要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法\r\n\r\n### Controller返回JSON数据\r\n\r\n+ Jackon应该是目前比较好的json解析工具\r\n+ 工具不止一个还有比如fastjson\r\n+ 使用Jackson,使用前先导入jar包\r\n\r\n对应的maven的依赖为\r\n\r\n```xml\r\n<dependency>\r\n            <groupId>com.fasterxml.jackson.core</groupId>\r\n            <artifactId>jackson-databind</artifactId>\r\n            <version>2.11.3</version>\r\n</dependency>\r\n```\r\n\r\n**添加maven之后，记得重新在Tomcat上添加包**\r\n\r\n配置web.xml文件\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\r\n         version=\"4.0\">\r\n\r\n    <servlet>\r\n        <servlet-name>springmvc</servlet-name>\r\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet\r\n        </servlet-class>\r\n        <init-param>\r\n            <param-name>contextConfigLocation</param-name>\r\n            <param-value>classpath:spring-servlet.xml</param-value>\r\n        </init-param>\r\n        <load-on-startup>1</load-on-startup>\r\n    </servlet>\r\n    <servlet-mapping>\r\n        <servlet-name>springmvc</servlet-name>\r\n        <url-pattern>/</url-pattern>\r\n    </servlet-mapping>\r\n\r\n    <filter>\r\n        <filter-name>encoding</filter-name>\r\n        <filter-class>org.springframework.web.filter.CharacterEncodingFilter\r\n        </filter-class>\r\n        <init-param>\r\n            <param-name>encoding</param-name>\r\n            <param-value>utf-8</param-value>\r\n        </init-param>\r\n    </filter>\r\n    <filter-mapping>\r\n        <filter-name>encoding</filter-name>\r\n        <url-pattern>/*</url-pattern>\r\n    </filter-mapping>\r\n\r\n</web-app>\r\n```\r\n\r\nspring-servlet.xml文件\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xmlns:context=\"http://www.springframework.org/schema/context\"\r\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n       http://www.springframework.org/schema/beans/spring-beans.xsd\r\n       http://www.springframework.org/schema/context\r\n       https://www.springframework.org/schema/context/spring-context.xsd\r\n       http://www.springframework.org/schema/mvc\r\n       https://www.springframework.org/schema/mvc/spring-mvc.xsd\">\r\n    <context:component-scan base-package=\"com.xhn.controller\"/>\r\n    <!-- 视图解析器    -->\r\n    <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\" id=\"internalResourceViewResolver\">\r\n        <!-- 前缀    -->\r\n        <property name=\"prefix\" value=\"/WEB-INF/jsp/\" />\r\n        <!-- 后缀    -->\r\n        <property name=\"suffix\" value=\".jsp\" />\r\n    </bean>\r\n\r\n<!--    Json乱码问题-->\r\n    <mvc:annotation-driven>\r\n        <mvc:message-converters register-defaults=\"true\">\r\n            <bean class=\"org.springframework.http.converter.StringHttpMessageConverter\">\r\n                <constructor-arg value=\"UTF-8\"/>\r\n            </bean>\r\n            <bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\r\n                <property name=\"objectMapper\">\r\n                    <bean class=\"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean\">\r\n                        <property name=\"failOnEmptyBeans\" value=\"false\"/>\r\n                    </bean>\r\n                </property>\r\n            </bean>\r\n        </mvc:message-converters>\r\n    </mvc:annotation-driven>\r\n\r\n\r\n\r\n</beans>\r\n```\r\n\r\n创建好controller和pojo的包\r\n\r\n创建一个User的实体类\r\n\r\n```java\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class User {\r\n    private  int id;\r\n    private String name;\r\n    private int age;\r\n}\r\n\r\n```\r\n\r\n创建一个UserController的类\r\n\r\n开始测试\r\n\r\n```jav\r\n@RequestMapping(\"/j1\")\r\n    public String json1() throws JsonProcessingException {\r\n\r\n        ObjectMapper mapper= new ObjectMapper();\r\n        User user=new User(1,\"肖海南\",18);\r\n        String s = mapper.writeValueAsString(user);\r\n        return s;\r\n    }\r\n```\r\n\r\n输出：{\"id\":1,\"name\":\"肖海南\",\"age\":18}\r\n\r\n### 代码优化\r\n\r\n@Controller会走视图解析器，@RestController不会，如果有@RestController就可以不用使用@ResponseBody\r\n\r\n所以如果UserController使用的是Controller的注解的话，那么就要在方法的前面添加@ResponseBody\r\n\r\n成功的转换成了一个Json的字符串，如果没有在web.xml中配置的话就会出现乱码问题，我这里在前面的web.xml中已经添加了\r\n\r\n```xml\r\n<!--    Json乱码问题-->\r\n    <mvc:annotation-driven>\r\n        <mvc:message-converters register-defaults=\"true\">\r\n            <bean class=\"org.springframework.http.converter.StringHttpMessageConverter\">\r\n                <constructor-arg value=\"UTF-8\"/>\r\n            </bean>\r\n            <bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\r\n                <property name=\"objectMapper\">\r\n                    <bean class=\"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean\">\r\n                        <property name=\"failOnEmptyBeans\" value=\"false\"/>\r\n                    </bean>\r\n                </property>\r\n            </bean>\r\n        </mvc:message-converters>\r\n    </mvc:annotation-driven>\r\n```\r\n\r\n### 用Json输出一个集合\r\n\r\n再用UserController输出一个集合\r\n\r\n```java\r\n@RequestMapping(\"/j2\")\r\n    public String json2() throws JsonProcessingException {\r\n       ObjectMapper mapper= new ObjectMapper();\r\n        List<User> userList=new ArrayList<User>();\r\n        User user1=new User(1,\"肖海南1号\",18);\r\n        User user2=new User(2,\"肖海南2号\",18);\r\n        User user3=new User(3,\"肖海南3号\",18);\r\n        User user4=new User(4,\"肖海南4号\",18);\r\n        userList.add(user1);\r\n        userList.add(user2);\r\n        userList.add(user3);\r\n        userList.add(user4);\r\n       String s = mapper.writeValueAsString(userList);\r\n        return s;\r\n    }\r\n```\r\n\r\n可以得到输出的结果，[{\"id\":1,\"name\":\"肖海南1号\",\"age\":18},{\"id\":2,\"name\":\"肖海南2号\",\"age\":18},{\"id\":3,\"name\":\"肖海南3号\",\"age\":18},{\"id\":4,\"name\":\"肖海南4号\",\"age\":18}]\r\n\r\n整体被一个中括号包裹，用大括号分隔开\r\n\r\n### 用Json返回一个时间\r\n\r\n然后尝试输出一个时间的对象,在UserController中添加一个方法\r\n\r\n```java\r\n@RequestMapping(\"/json4\") \r\npublic String json4() throws JsonProcessingException { \r\nObjectMapper mapper = new ObjectMapper(); \r\n//不使用时间戳的方式 \r\nmapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false); //自定义日期格式对象 \r\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"); \r\n//指定日期格式 \r\nmapper.setDateFormat(sdf); \r\nDate date = new Date(); \r\nString str = mapper.writeValueAsString(date); \r\nreturn str; \r\n}\r\n```\r\n\r\n### 抽出工具类[源码思想]\r\n\r\n```java\r\npublic class JsonUtils {\r\n\r\n\r\n    public static String getJson(Object object){\r\n        return getJson(object,\"yyyy-MM-dd HH:mm:ss\");\r\n    }\r\n\r\n    public static String getJson(Object object,String dateFormat){\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false); //自定义日期格式对象\r\n        SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);\r\n        sdf.setTimeZone(TimeZone.getTimeZone(\"GMT+8:00\"));\r\n        mapper.setDateFormat(sdf);\r\n        try {\r\n            return mapper.writeValueAsString(object);\r\n        } catch (JsonProcessingException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n这个工具类利用了重载思想，在第一个getJson方法中直接调用了第二个方法，这个十分的好,还用了封装\r\n\r\n输出集合就可以简化为\r\n\r\n```java\r\n@RequestMapping(\"/j2\")\r\n    public String json2() throws JsonProcessingException {\r\n//       ObjectMapper mapper= new ObjectMapper();\r\n        List<User> userList=new ArrayList<User>();\r\n        User user1=new User(1,\"肖海南1号\",18);\r\n        User user2=new User(2,\"肖海南2号\",18);\r\n        User user3=new User(3,\"肖海南3号\",18);\r\n        User user4=new User(4,\"肖海南4号\",18);\r\n        userList.add(user1);\r\n        userList.add(user2);\r\n        userList.add(user3);\r\n        userList.add(user4);\r\n//       String s = mapper.writeValueAsString(userList);\r\n        return JsonUtils.getJson(userList);\r\n    }\r\n```\r\n\r\n同样的输出时间就可以简化为\r\n\r\n```java\r\n @RequestMapping(\"/j3\")\r\n    public String json3() throws JsonProcessingException {\r\n        Date date =new Date();\r\n        return JsonUtils.getJson(date);\r\n\r\n    }\r\n```\r\n\r\n### fastJson\r\n\r\n添加依赖\r\n\r\n```xml\r\n<dependency>\r\n            <groupId>com.alibaba</groupId>\r\n            <artifactId>fastjson</artifactId>\r\n            <version>1.2.75</version>\r\n</dependency>\r\n```\r\n\r\n同样的记得在Tomcat中添加\r\n [![404](http://www.xhnya.top//upload/484125f8-e44f-4de1-8a49-3562ada7dcda.png \"404\")](http://www.xhnya.top//upload/484125f8-e44f-4de1-8a49-3562ada7dcda.png \"404\")', '2021-01-27 14:00:59.963000', 'https://picsum.photos/id/1068/800/450', '原创', b'1', b'1', b'1', 'JSON', '2021-01-27 14:01:34.203000', 119, 85, 1, '在前后端分离时代的传值处理遇到问题，JSON应运而生，JSON是一种数据风格');
INSERT INTO `t_blog` VALUES (106, '0', '0', '在配置gateway的端口的时候我把 server.port写成了service.port\r\n导致游览器出现了localhost拒绝访问的问题，发现是这个的问题，端口没开启就会在游览器报错', '2021-02-24 13:54:04.564000', 'https://picsum.photos/seed/picsum/800/450', '原创', b'1', b'0', b'0', 'loclhost无法访问的小问题', '2021-02-24 13:54:04.564000', 107, 105, 1, '快乐每一天');

-- ----------------------------
-- Table structure for t_blog_tags
-- ----------------------------
DROP TABLE IF EXISTS `t_blog_tags`;
CREATE TABLE `t_blog_tags`  (
  `blogs_id` bigint(20) NOT NULL,
  `tags_id` bigint(20) NOT NULL,
  INDEX `FK5feau0gb4lq47fdb03uboswm8`(`tags_id`) USING BTREE,
  INDEX `FKh4pacwjwofrugxa9hpwaxg6mr`(`blogs_id`) USING BTREE,
  CONSTRAINT `FK5feau0gb4lq47fdb03uboswm8` FOREIGN KEY (`tags_id`) REFERENCES `t_tag` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FKh4pacwjwofrugxa9hpwaxg6mr` FOREIGN KEY (`blogs_id`) REFERENCES `t_blog` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_blog_tags
-- ----------------------------
INSERT INTO `t_blog_tags` VALUES (48, 31);
INSERT INTO `t_blog_tags` VALUES (48, 35);
INSERT INTO `t_blog_tags` VALUES (48, 36);
INSERT INTO `t_blog_tags` VALUES (64, 1);
INSERT INTO `t_blog_tags` VALUES (64, 36);
INSERT INTO `t_blog_tags` VALUES (64, 63);
INSERT INTO `t_blog_tags` VALUES (68, 67);
INSERT INTO `t_blog_tags` VALUES (80, 79);
INSERT INTO `t_blog_tags` VALUES (83, 1);
INSERT INTO `t_blog_tags` VALUES (83, 63);
INSERT INTO `t_blog_tags` VALUES (83, 67);
INSERT INTO `t_blog_tags` VALUES (83, 75);
INSERT INTO `t_blog_tags` VALUES (83, 81);
INSERT INTO `t_blog_tags` VALUES (84, 1);
INSERT INTO `t_blog_tags` VALUES (84, 63);
INSERT INTO `t_blog_tags` VALUES (84, 74);
INSERT INTO `t_blog_tags` VALUES (84, 75);
INSERT INTO `t_blog_tags` VALUES (84, 81);
INSERT INTO `t_blog_tags` VALUES (86, 1);
INSERT INTO `t_blog_tags` VALUES (86, 32);
INSERT INTO `t_blog_tags` VALUES (86, 75);
INSERT INTO `t_blog_tags` VALUES (86, 79);
INSERT INTO `t_blog_tags` VALUES (86, 81);
INSERT INTO `t_blog_tags` VALUES (72, 71);
INSERT INTO `t_blog_tags` VALUES (87, 1);
INSERT INTO `t_blog_tags` VALUES (87, 2);
INSERT INTO `t_blog_tags` VALUES (87, 32);
INSERT INTO `t_blog_tags` VALUES (87, 75);
INSERT INTO `t_blog_tags` VALUES (87, 81);
INSERT INTO `t_blog_tags` VALUES (77, 63);
INSERT INTO `t_blog_tags` VALUES (77, 67);
INSERT INTO `t_blog_tags` VALUES (77, 74);
INSERT INTO `t_blog_tags` VALUES (77, 75);
INSERT INTO `t_blog_tags` VALUES (88, 32);
INSERT INTO `t_blog_tags` VALUES (88, 75);
INSERT INTO `t_blog_tags` VALUES (88, 76);
INSERT INTO `t_blog_tags` VALUES (88, 79);
INSERT INTO `t_blog_tags` VALUES (88, 81);
INSERT INTO `t_blog_tags` VALUES (89, 1);
INSERT INTO `t_blog_tags` VALUES (89, 32);
INSERT INTO `t_blog_tags` VALUES (89, 75);
INSERT INTO `t_blog_tags` VALUES (89, 76);
INSERT INTO `t_blog_tags` VALUES (89, 81);
INSERT INTO `t_blog_tags` VALUES (90, 1);
INSERT INTO `t_blog_tags` VALUES (90, 32);
INSERT INTO `t_blog_tags` VALUES (90, 75);
INSERT INTO `t_blog_tags` VALUES (90, 79);
INSERT INTO `t_blog_tags` VALUES (90, 81);
INSERT INTO `t_blog_tags` VALUES (91, 1);
INSERT INTO `t_blog_tags` VALUES (91, 32);
INSERT INTO `t_blog_tags` VALUES (91, 63);
INSERT INTO `t_blog_tags` VALUES (91, 71);
INSERT INTO `t_blog_tags` VALUES (91, 74);
INSERT INTO `t_blog_tags` VALUES (91, 75);
INSERT INTO `t_blog_tags` VALUES (91, 76);
INSERT INTO `t_blog_tags` VALUES (91, 79);
INSERT INTO `t_blog_tags` VALUES (96, 32);
INSERT INTO `t_blog_tags` VALUES (96, 71);
INSERT INTO `t_blog_tags` VALUES (96, 81);
INSERT INTO `t_blog_tags` VALUES (96, 94);
INSERT INTO `t_blog_tags` VALUES (96, 95);
INSERT INTO `t_blog_tags` VALUES (98, 63);
INSERT INTO `t_blog_tags` VALUES (98, 74);
INSERT INTO `t_blog_tags` VALUES (98, 97);
INSERT INTO `t_blog_tags` VALUES (100, 32);
INSERT INTO `t_blog_tags` VALUES (100, 76);
INSERT INTO `t_blog_tags` VALUES (100, 79);
INSERT INTO `t_blog_tags` VALUES (100, 99);
INSERT INTO `t_blog_tags` VALUES (106, 1);
INSERT INTO `t_blog_tags` VALUES (106, 2);

-- ----------------------------
-- Table structure for t_comment
-- ----------------------------
DROP TABLE IF EXISTS `t_comment`;
CREATE TABLE `t_comment`  (
  `id` bigint(20) NOT NULL,
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `content` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `blog_id` bigint(20) NULL DEFAULT NULL,
  `parent_comment_id` bigint(20) NULL DEFAULT NULL,
  `admin_comment` bit(1) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `FKke3uogd04j4jx316m1p51e05u`(`blog_id`) USING BTREE,
  INDEX `FK4jj284r3pb7japogvo6h72q95`(`parent_comment_id`) USING BTREE,
  CONSTRAINT `FK4jj284r3pb7japogvo6h72q95` FOREIGN KEY (`parent_comment_id`) REFERENCES `t_comment` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `FKke3uogd04j4jx316m1p51e05u` FOREIGN KEY (`blog_id`) REFERENCES `t_blog` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_comment
-- ----------------------------
INSERT INTO `t_comment` VALUES (49, '/images/avatar.jpeg', '测试', '2020-11-22 00:00:00.000000', 'xhn930957853@163.com', 'xhn', 48, NULL, b'0');
INSERT INTO `t_comment` VALUES (50, '/images/avatar.jpeg', '这个是测试回复@xhn的信息', '2020-11-22 00:00:00.000000', 'xhn930957853@163.com', '大白', 48, 49, b'0');
INSERT INTO `t_comment` VALUES (51, '/images/avatar.jpeg', '新的评论信息', '2020-11-23 00:00:00.000000', 'xhn930957853@163.com', 'x', 48, NULL, b'0');
INSERT INTO `t_comment` VALUES (52, '/images/avatar.jpeg', 'xhn回复大白的评论信息', '2020-11-23 00:00:00.000000', 'xhn930957853@163.com', 'xhn', 48, 50, b'0');
INSERT INTO `t_comment` VALUES (53, '/images/avatar.jpeg', '这是一条新的测试评论', '2020-11-23 00:00:00.000000', 'xiaohai@163.com', '小海', 48, NULL, b'0');
INSERT INTO `t_comment` VALUES (54, 'https://picsum.photos/id/1045/100/100', '管理员评论测试', '2020-11-23 00:00:00.000000', '930957853@qq.com', 'xhn', 48, NULL, b'1');
INSERT INTO `t_comment` VALUES (55, 'https://picsum.photos/id/1045/100/100', '管理员评论', '2020-11-23 00:00:00.000000', '930957853@qq.com', 'xhn', 48, 53, b'1');
INSERT INTO `t_comment` VALUES (56, 'https://picsum.photos/seed/picsum/80/80', '测试', '2020-11-23 00:00:00.000000', '930957853@qq.com', 'xhn', 48, NULL, b'1');
INSERT INTO `t_comment` VALUES (57, 'https://picsum.photos/seed/picsum/80/80', '测试', '2020-11-26 07:15:13.470000', '930957853@qq.com', 'xhn', 48, NULL, b'1');
INSERT INTO `t_comment` VALUES (58, 'https://picsum.photos/seed/picsum/80/80', '博客测试', '2020-11-26 07:15:35.108000', '930957853@qq.com', 'xhn', 48, NULL, b'1');
INSERT INTO `t_comment` VALUES (59, '/images/avatar.jpeg', '测试', '2020-11-26 08:53:54.881000', '90957853@qq.com', 'xhnya', 48, NULL, b'0');
INSERT INTO `t_comment` VALUES (61, '/images/avatar.jpeg', 'ya', '2020-11-27 07:11:35.394000', 'xhn930957853@163.com', 'ya', 48, 52, b'0');
INSERT INTO `t_comment` VALUES (65, '/images/avatar.jpeg', '666', '2020-12-02 12:18:42.050000', '1465262855@qq.com', 'dashuanyi', 64, NULL, b'0');
INSERT INTO `t_comment` VALUES (69, '/images/avatar.jpeg', '(´△｀)♪', '2020-12-06 07:52:31.312000', '930957853@qq.com', '(´△｀)♪', 64, 65, b'0');
INSERT INTO `t_comment` VALUES (78, '/images/avatar.jpeg', '我真垃圾', '2020-12-29 12:29:21.442000', '930957853@qq.com', 'x', 77, NULL, b'0');

-- ----------------------------
-- Table structure for t_tag
-- ----------------------------
DROP TABLE IF EXISTS `t_tag`;
CREATE TABLE `t_tag`  (
  `id` bigint(20) NOT NULL,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `tag_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_tag
-- ----------------------------
INSERT INTO `t_tag` VALUES (1, NULL, 'java');
INSERT INTO `t_tag` VALUES (2, NULL, 'C++');
INSERT INTO `t_tag` VALUES (3, NULL, 'HTML');
INSERT INTO `t_tag` VALUES (4, NULL, 'CSS');
INSERT INTO `t_tag` VALUES (31, NULL, '数据与结构');
INSERT INTO `t_tag` VALUES (32, NULL, 'Spring');
INSERT INTO `t_tag` VALUES (35, NULL, '博客测试');
INSERT INTO `t_tag` VALUES (36, NULL, '博客部署');
INSERT INTO `t_tag` VALUES (63, NULL, 'mysql');
INSERT INTO `t_tag` VALUES (67, NULL, 'markdown基本语法');
INSERT INTO `t_tag` VALUES (71, NULL, 'maven');
INSERT INTO `t_tag` VALUES (74, NULL, 'mybatis');
INSERT INTO `t_tag` VALUES (75, NULL, 'ssm框架');
INSERT INTO `t_tag` VALUES (76, NULL, 'Spring MVC');
INSERT INTO `t_tag` VALUES (79, NULL, 'JQuery');
INSERT INTO `t_tag` VALUES (81, NULL, 'JavaEE');
INSERT INTO `t_tag` VALUES (94, NULL, '微服务');
INSERT INTO `t_tag` VALUES (95, NULL, '分布式');
INSERT INTO `t_tag` VALUES (97, NULL, 'Mybatis-plus');
INSERT INTO `t_tag` VALUES (99, NULL, 'JSON');
INSERT INTO `t_tag` VALUES (102, NULL, '谷粒学院');

-- ----------------------------
-- Table structure for t_type
-- ----------------------------
DROP TABLE IF EXISTS `t_type`;
CREATE TABLE `t_type`  (
  `id` bigint(20) NOT NULL,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_type
-- ----------------------------
INSERT INTO `t_type` VALUES (1, '错误日志');
INSERT INTO `t_type` VALUES (2, '开发者手册');
INSERT INTO `t_type` VALUES (3, 'JavaScript');
INSERT INTO `t_type` VALUES (4, 'JAVA');
INSERT INTO `t_type` VALUES (5, 'C++');
INSERT INTO `t_type` VALUES (6, 'C');
INSERT INTO `t_type` VALUES (7, 'HTML');
INSERT INTO `t_type` VALUES (9, 'python');
INSERT INTO `t_type` VALUES (10, '数据与结构');
INSERT INTO `t_type` VALUES (11, '操作系统');
INSERT INTO `t_type` VALUES (12, 'CSS');
INSERT INTO `t_type` VALUES (62, 'Linux');
INSERT INTO `t_type` VALUES (66, 'markdown');
INSERT INTO `t_type` VALUES (70, 'JaveWeb');
INSERT INTO `t_type` VALUES (73, 'mysql');
INSERT INTO `t_type` VALUES (82, 'Mybatis');
INSERT INTO `t_type` VALUES (85, 'Spring');
INSERT INTO `t_type` VALUES (92, 'SSM框架');
INSERT INTO `t_type` VALUES (93, 'SpringBoot');
INSERT INTO `t_type` VALUES (101, '项目');
INSERT INTO `t_type` VALUES (105, '每天一个Bug');

-- ----------------------------
-- Table structure for t_user
-- ----------------------------
DROP TABLE IF EXISTS `t_user`;
CREATE TABLE `t_user`  (
  `id` bigint(20) NOT NULL,
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `create_time` datetime(6) NULL DEFAULT NULL,
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `type` int(11) NULL DEFAULT NULL,
  `update_time` datetime(6) NULL DEFAULT NULL,
  `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_user
-- ----------------------------
INSERT INTO `t_user` VALUES (1, 'https://picsum.photos/seed/picsum/80/80', '2020-11-15 00:00:00.000000', '930957853@qq.com', 'xhn', '40d3ef8ac36e065b5f56e4d736b9a6ba', 1, '2020-11-15 00:00:00.000000', 'xhn');

SET FOREIGN_KEY_CHECKS = 1;
